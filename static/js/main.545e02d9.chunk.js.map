{"version":3,"sources":["shapes/Dodecahedron.tsx","three-extension/MyDecal.tsx","shapes/Cube.tsx","store/ObjectStore.tsx","three-extension/MyTransformControls.tsx","shapes/NPoint.tsx","shapes/Plane.tsx","three-extension/TransformControlsLock.tsx","scene/BasicScene.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Dodecahedron","time","props","useState","radius","color","mass","useSphere","args","ref","hovered","usePromise","ms","Promise","res","setTimeout","materialDefault","THREE","roughness","materialHover","raycast","meshBounds","name","material","MyDecal","decalData","transform","position","setPosition","rotation","setRotation","scale","setScale","geometry","useThree","scene","DecalGeometry","mesh","Vector3","Euler","texture_1","useLoader","TextureLoader","MeshPhysicalMaterial","map","normalScale","Vector2","transparent","depthTest","depthWrite","polygonOffset","polygonOffsetFactor","wireframe","side","FrontSide","reflectivity","useRef","userData","controls","label","value","onChange","console","log","min","step","lock","onUpdate","self","needsUpdate","attach","object","Cube","objectData","setArgs","castShadow","setCastShadow","setColor","setWireframe","setReflectivity","physics","enabled","physicsEnabled","setPhysicsEnabled","setMass","useBox","api","useEffect","set","decals","index","current","initialState","objects","uuid","uuidv4","type","Math","PI","r","g","b","Array","useObjectStore","create","config","get","Object","assign","combine","fn","produce","immer","combineAndImmer","updateObject","state","addObject","MyTransformControls","React","camera","rest","transformProps","pick","gl","defaultCamera","invalidate","explCamera","TransformControlsImpl","domElement","addEventListener","removeEventListener","dispose","undefined","NPoint","setHover","arg","points","onPointerOver","onPointerOut","Html","distanceFactor","style","pointerEvents","display","className","Plane","usePlane","TransformControlsLock","raycaster","mouse","sc","id","LevaInputs","STRING","reduce","into","obj","child","i","schema","s","substr","button","setSelectedObject","getObjectById","children","p","folder","collapsed","useControls","mode","options","rotate","translate","buttonGroup","opts","setMode","selectedObject","orbitControls","transformControls","callback","event","setTransform","toArray","setObject","inputs","control","_","setMaterial","setPhysics","orientation","x","y","z","document","clientX","window","innerWidth","clientY","innerHeight","setFromCamera","intersects","intersectObjects","filter","intersect","length","showX","showY","showZ","size","space","axis","translationSnap","rotationSnap","scaleSnap","dragging","receiveShadow","OrbitControls","BasicScene","useTransform","hoverinc","RayTracingRenderer","canvas","antialias","alpha","setSize","tick","render","requestAnimationFrame","renderer","webgl","erichlof","gammaOutput","gammaFactor","setPixelRatio","toneMapping","ACESFilmicToneMapping","toneMappingExposure","renderWhenOffFocus","bounces","setRenderer","Fallback","App","background","fov","Color","fallback","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.545e02d9.chunk.js","sourcesContent":["// @ts-ignore\r\nimport {useBox, useSphere} from \"@react-three/cannon\";\r\nimport React, {useState} from \"react\";\r\nimport usePromise from \"react-promise-suspense\";\r\nimport {Html} from \"@react-three/drei\";\r\nimport * as THREE from \"three\";\r\nimport { meshBounds } from '@react-three/drei'\r\n\r\n\r\n\r\n\r\n// @ts-ignore\r\nconst Dodecahedron = ({ time,...props }) => {\r\n\r\n    const [radius, setRadius] = useState(2);\r\n    const [color, setColor] = useState('#fff');\r\n    // const controls = useControls('Shape', {\r\n    //     radius:{\r\n    //         value: 2,\r\n    //         min : 1,\r\n    //         max: 10,\r\n    //         step: 1\r\n    //     },\r\n    //     color: {\r\n    //         value: '#fff'\r\n    //     }\r\n    // });\r\n    const [mass, setMass] = useState(1);\r\n    const [ref] = useSphere(() => ({ mass,args: radius, ...props }));\r\n\r\n    const [hovered, setHover] = useState(false)\r\n\r\n    // In here it could load textures, images, triangulate textgeometry, etc\r\n    // The line below produces a fake load, emulating loading assets/set-up processing\r\n    usePromise(ms => new Promise(res => setTimeout(res, ms)), [time])\r\n    // React will bail out until the suspense is lifted, then it renders the view\r\n\r\n    const materialDefault = new THREE.MeshPhysicalMaterial({\r\n        color: color,\r\n        roughness: 0.8\r\n    })\r\n    const materialHover = new THREE.MeshPhysicalMaterial({\r\n        color: 0xcc0000,\r\n        roughness: 0.1\r\n    })\r\n    return (\r\n        <mesh ref={ref} {...props} raycast={meshBounds}\r\n              // onPointerOver={() => setHover(true)}\r\n              // onPointerOut={() => setHover(false)}\r\n              name=\"Dodecahedron\" material={hovered ? materialHover : materialDefault} >\r\n            <dodecahedronBufferGeometry args={[hovered ? (radius+radius/10): radius]}></dodecahedronBufferGeometry>\r\n            {/*<Html scale={10} style={{ pointerEvents: \"none\", display: hovered ? \"block\" : \"none\" }}>*/}\r\n            {/*    <div className=\"content\">*/}\r\n            {/*        Suspense <br />*/}\r\n            {/*        {mass}ms*/}\r\n            {/*    </div>*/}\r\n            {/*</Html>*/}\r\n        </mesh>\r\n    )\r\n\r\n}\r\nexport default Dodecahedron;\r\n","import DecalData from \"./../store/DecalData\";\r\nimport {\r\n    BoxGeometry,\r\n    BufferGeometry,\r\n    Euler, FrontSide,\r\n    ImageUtils,\r\n    Mesh,\r\n    MeshBasicMaterial,\r\n    MeshPhysicalMaterial, TextureLoader,\r\n    Vector2,\r\n    Vector3\r\n} from \"three\";\r\nimport {useEffect, useRef, useState} from \"react\";\r\nimport {DecalGeometry} from \"three/examples/jsm/geometries/DecalGeometry\";\r\nimport {useLoader, useThree} from \"@react-three/fiber\";\r\nimport {MeshPhysicalMaterialParameters} from \"three/src/materials/MeshPhysicalMaterial\";\r\n\r\nexport interface MyDecalProps {\r\n    mesh: Mesh;\r\n    decalData: DecalData;\r\n}\r\nconst MyDecal = (props: MyDecalProps) => {\r\n    // console.log(props.mesh.geometry.isBufferGeometry);\r\n    // const [args, setArgs] = useState<[]>(decalDate.geometry.args);\r\n    const [position, setPosition] = useState<[number, number, number]>(props.decalData.transform.position);\r\n    const [rotation, setRotation] = useState<[number, number, number]>(props.decalData.transform.rotation);\r\n    const [scale, setScale] = useState<[number, number, number]>(props.decalData.transform.scale);\r\n\r\n    const { scene } = useThree();\r\n    const geometry =  new DecalGeometry(props.mesh, new Vector3(position[0], position[1], position[2]), new Euler(rotation[0], rotation[1], rotation[2]), new Vector3(scale[0], scale[1], scale[2]));\r\n\r\n    const texture_1 = useLoader(TextureLoader, 'assets/Label2.png');\r\n    const material = new MeshPhysicalMaterial({\r\n        // specular: 0xffffff,\r\n        // shininess: 10,\r\n        map: texture_1,\r\n        // normalMap: ImageUtils.loadTexture( 'assets/wrinkle-normal.jpg' ),\r\n        normalScale: new Vector2( .15, .15 ),\r\n        transparent: true,\r\n        depthTest: true,\r\n        depthWrite: false,\r\n        polygonOffset: true,\r\n        polygonOffsetFactor: -4,\r\n        wireframe: props.decalData.material.wireframe,\r\n        side: FrontSide,\r\n        reflectivity: props.decalData.material.reflectivity,\r\n        roughness: props.decalData.material.roughness\r\n    });\r\n    // const test = useUpdate(() => {\r\n    //\r\n    // })\r\n    const ref = useRef<Mesh>(null!);\r\n    // const [currentGeometry, setCurrentGeometry] = useState<any>();\r\n    // useEffect(() => {\r\n    //     if(props.mesh && geometry !== props.mesh.geometry){\r\n    //         console.log(scale);\r\n    //         // const geo = new DecalGeometry(props.mesh, new Vector3(position[0], position[1], position[2]), new Euler(rotation[0], rotation[1], rotation[2]), new Vector3(scale[0], scale[1], scale[2]));\r\n    //         if(ref.current.geometry){\r\n    //             ref.current.geometry.dispose();\r\n    //             // ref.current.geometry = geo;\r\n    //             (ref.current as any).needsUpdate = true;\r\n    //         }\r\n    //     }\r\n    // })\r\n    // const geometry = new BoxGeometry(1,1, 1);\r\n    return(\r\n        <mesh ref={ref} name=\"Decal\" material={material} userData={{\r\n            controls: {\r\n                // castShadow: {\r\n                //     label: 'Cast Shadow',\r\n                //     value: castShadow,\r\n                //     onChange: (value: boolean) => {\r\n                //         setCastShadow(value);\r\n                //     }\r\n                // },\r\n                transform: {\r\n                    position: {\r\n                        label: 'Position',\r\n                        value: position,\r\n                        onChange: (value: [number, number, number]) => {\r\n                            console.log(position)\r\n                            setPosition(value);\r\n                        }\r\n                    },\r\n                    rotation: {\r\n                        label: 'Rotation',\r\n                        value: rotation,\r\n                        onChange: (value: [number, number, number]) => {\r\n                            setRotation(value);\r\n                        }\r\n                    },\r\n                    scale: {\r\n                        label: 'Scale',\r\n                        value: scale,\r\n                        min: 0.1,\r\n                        step: 0.1,\r\n                        onChange: (value: [number, number, number]) => {\r\n                            setScale(value);\r\n                        },\r\n                        lock: true\r\n                    }\r\n                },\r\n                // geometry: {\r\n                //     args: {\r\n                //         label: 'Dimension',\r\n                //         value: args,\r\n                //         min: 0.1,\r\n                //         step: 0.2,\r\n                //         onChange: (value: any) => {\r\n                //             setArgs(value);\r\n                //         }\r\n                //     }\r\n                // },\r\n                // material: {\r\n                //     color: {\r\n                //         label: 'color',\r\n                //         value: color,\r\n                //         onChange: (value: string) => {\r\n                //             setColor(value);\r\n                //         }\r\n                //     },\r\n                //     wireframe: {\r\n                //         label: 'Wireframe',\r\n                //         value: wireframe,\r\n                //         onChange: (value: boolean) => {\r\n                //             setWireframe(value);\r\n                //         }\r\n                //     },\r\n                //     reflectivity: {\r\n                //         label: 'Reflectivity',\r\n                //         value: reflectivity,\r\n                //         onChange: (value: number) => {\r\n                //             setReflectivity(value);\r\n                //         }\r\n                //     }\r\n                // },\r\n                // physics: {\r\n                //     mass: {\r\n                //         label: 'Mass',\r\n                //         value: mass,\r\n                //         onChange: (value: number) => {\r\n                //             setMass(value);\r\n                //         }\r\n                //     }\r\n                // }\r\n            }\r\n        }} onUpdate={(self: any) => self.needsUpdate = true}>\r\n            {geometry && <primitive attach={\"geometry\"} object={geometry}/> }\r\n        </mesh>\r\n        // <mesh name=\"Decal\">\r\n        //     <primitive attach={\"geometry\"} object={geometry}/>\r\n        //     <meshPhysicalMaterial color={0x00ff00}></meshPhysicalMaterial>\r\n        // </mesh>\r\n    )\r\n}\r\nexport default MyDecal;\r\n","import {useBox} from \"@react-three/cannon\";\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport {useControls} from \"leva\";\r\nimport * as THREE from 'three';\r\nimport {Html} from \"@react-three/drei\";\r\nimport {Color, Mesh} from \"three\";\r\nimport {ObjectData} from \"../store/ObjectStore\";\r\nimport MyDecal from \"../three-extension/MyDecal\";\r\nimport DecalData from \"../store/DecalData\";\r\n\r\n// @ts-ignore\r\nfunction Cube(objectData: ObjectData) {\r\n    const [args, setArgs] = useState<[]>(objectData.geometry.args);\r\n\r\n    const [position, setPosition] = useState(objectData.transform.position);\r\n    const [rotation, setRotation] = useState(objectData.transform.rotation);\r\n    const [scale, setScale] = useState(objectData.transform.scale);\r\n\r\n    const [castShadow, setCastShadow] = useState(objectData.castShadow);\r\n\r\n    const [color, setColor] = useState(objectData.material.color);\r\n    const [wireframe, setWireframe] = useState(objectData.material.wireframe);\r\n    const[reflectivity, setReflectivity] = useState(objectData.material.reflectivity);\r\n\r\n    const [physicsEnabled, setPhysicsEnabled] = useState(objectData.physics.enabled);\r\n    const [mass, setMass] = useState(objectData.physics.mass);\r\n\r\n    const [ref, api] = useBox(() => ({ args, mass, position, rotation, scale }));\r\n    const [hovered, setHover] = useState(false)\r\n\r\n    const mesh = useRef<Mesh>(null!)\r\n    useEffect(() => {\r\n        api.position.set(position[0], position[1], position[2]);\r\n        api.rotation.set(rotation[0], rotation[1], rotation[2]);\r\n        api.mass?.set(mass);\r\n    }, [position, rotation, mass]);\r\n    const renderDecal = (decalData: DecalData, index: number) => {\r\n        if(mesh.current){\r\n            return <MyDecal key={index} mesh={mesh.current} decalData={decalData}/>\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <mesh ref={ref} name={\"Cube\"} castShadow={castShadow} scale={scale} userData={{\r\n                controls: {\r\n                    castShadow: {\r\n                        label: 'Cast Shadow',\r\n                        value: castShadow,\r\n                        onChange: (value: boolean) => {\r\n                            setCastShadow(value);\r\n                        }\r\n                    },\r\n                    transform: {\r\n                        position: {\r\n                            label: 'Position',\r\n                            value: position,\r\n                            onChange: (value: [number, number, number]) => {\r\n                                setPosition(value);\r\n                            }\r\n                        },\r\n                        rotation: {\r\n                            label: 'Rotation',\r\n                            value: rotation,\r\n                            onChange: (value: [number, number, number]) => {\r\n                                setRotation(value);\r\n                            }\r\n                        },\r\n                        scale: {\r\n                            label: 'Scale',\r\n                            value: scale,\r\n                            onChange: (value: [number, number, number]) => {\r\n                                setScale(value);\r\n                            },\r\n                            lock: true\r\n                        }\r\n                    },\r\n                    geometry: {\r\n                        args: {\r\n                            label: 'Dimension',\r\n                            value: args,\r\n                            min: 0.1,\r\n                            step: 0.2,\r\n                            onChange: (value: any) => {\r\n                                setArgs(value);\r\n                            }\r\n                        }\r\n                    },\r\n                    material: {\r\n                        color: {\r\n                            label: 'color',\r\n                            value: color,\r\n                            onChange: (value: string) => {\r\n                                setColor(value);\r\n                            }\r\n                        },\r\n                        wireframe: {\r\n                            label: 'Wireframe',\r\n                            value: wireframe,\r\n                            onChange: (value: boolean) => {\r\n                                setWireframe(value);\r\n                            }\r\n                        },\r\n                        reflectivity: {\r\n                            label: 'Reflectivity',\r\n                            value: reflectivity,\r\n                            onChange: (value: number) => {\r\n                                setReflectivity(value);\r\n                            }\r\n                        }\r\n                    },\r\n                    physics: {\r\n                        enabled: {\r\n                            label: 'Enabled',\r\n                            value: physicsEnabled,\r\n                            onChange: (value: boolean) => {\r\n                                setPhysicsEnabled(value);\r\n                            }\r\n                        },\r\n                        mass: {\r\n                            label: 'Mass',\r\n                            value: mass,\r\n                            onChange: (value: number) => {\r\n                                setMass(value);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }}\r\n                  // onPointerOver={() => setHover(true)}\r\n                  // onPointerOut={() => setHover(false)}\r\n            >\r\n                <boxBufferGeometry args={args}/>\r\n                <meshPhysicalMaterial color={color} wireframe={wireframe} reflectivity={reflectivity}></meshPhysicalMaterial>\r\n                {/*<Html distanceFactor={10} style={{ pointerEvents: \"none\", display: hovered ? \"block\" : \"none\" }}>*/}\r\n                {/*    <div className=\"content\">*/}\r\n                {/*        Mass: {mass}*/}\r\n                {/*    </div>*/}\r\n                {/*</Html>*/}\r\n\r\n            </mesh>\r\n            {objectData.decals.map(renderDecal)}\r\n        </>\r\n\r\n    )\r\n}\r\nexport default  Cube;\r\n","import create, {\r\n    State,\r\n    SetState,\r\n    GetState,\r\n    StoreApi\r\n    // StateCreator\r\n} from \"zustand\";\r\nimport {v4 as uuidv4} from 'uuid';\r\nimport produce from \"immer\";\r\nimport DecalData from \"./DecalData\";\r\n\r\nexport interface ScenaData extends State {\r\n    objects: ObjectData[]\r\n}\r\nexport interface ObjectData extends State {\r\n    uuid: string;\r\n    type: 'Plane'| 'Cube' | 'NPoint';\r\n    castShadow: boolean;\r\n    transform: ObjectTransform;\r\n    geometry: ObjectGeometry;\r\n    material: ObjectMaterial;\r\n    physics: ObjectPhysics;\r\n    decals: DecalData[];\r\n}\r\nexport interface ObjectTransform {\r\n    position: [number, number, number];\r\n    rotation: [number, number, number];\r\n    scale: [number, number, number];\r\n}\r\n\r\nexport interface ObjectPhysics {\r\n    enabled: boolean;\r\n    mass: number\r\n}\r\n\r\nexport interface ObjectGeometry {\r\n    args: []\r\n}\r\nexport interface ObjectMaterial {\r\n    color: string;\r\n    wireframe: boolean;\r\n    reflectivity: number;\r\n    roughness?: number;\r\n}\r\ntype StateCreator<\r\n    T extends State,\r\n    CustomSetState = SetState<T>,\r\n    U extends State = T\r\n    > = (set: CustomSetState, get: GetState<T>, api: StoreApi<T>) => U;\r\n\r\n// @ts-ignore\r\nconst immer = <T extends State, U extends State>(config: StateCreator<T, (fn: (draft: T) => void) => void, U>): StateCreator<T, SetState<T>, U> => (set, get, api) => config((fn) => set(produce(fn) as (state: T) => T), get, api);\r\n\r\nconst combine = <PrimaryState extends State, SecondaryState extends State>(\r\n    initialState: PrimaryState,\r\n    create: (\r\n        set: SetState<PrimaryState & SecondaryState>,\r\n        get: GetState<PrimaryState & SecondaryState>,\r\n        api: StoreApi<PrimaryState & SecondaryState>\r\n    ) => SecondaryState\r\n): StateCreator<PrimaryState & SecondaryState> => (set, get, api) =>\r\n    Object.assign(\r\n        {},\r\n        initialState,\r\n        create(\r\n            set as SetState<PrimaryState & SecondaryState>,\r\n            get as GetState<PrimaryState & SecondaryState>,\r\n            api as StoreApi<PrimaryState & SecondaryState>\r\n        )\r\n    );\r\n\r\n\r\n\r\nconst combineAndImmer = <\r\n    PrimaryState extends State,\r\n    SecondaryState extends State\r\n    >(\r\n    initialState: PrimaryState,\r\n    config: StateCreator<\r\n        PrimaryState & SecondaryState,\r\n        (fn: (draft: PrimaryState) => void) => void,\r\n        SecondaryState\r\n        >\r\n): StateCreator<PrimaryState & SecondaryState> => {\r\n    return combine(initialState, immer(config));\r\n};\r\n\r\nconst initialState = {\r\n    objects: [{\r\n        uuid: uuidv4(),\r\n        type: 'Plane',\r\n        castShadow: true,\r\n        transform: {\r\n            position: [0, -10, 0],\r\n            rotation: [-Math.PI / 2, 0, 0],\r\n            scale: [2, 2, 2],\r\n        },\r\n        geometry: {\r\n            args: [ 10, 10]\r\n        },\r\n        material: {\r\n            color: {r: 0.9, g: 0.9, b: 0.9},\r\n            wireframe: false,\r\n            reflectivity: 0.5,\r\n            roughness: 1.0\r\n        },\r\n        physics: {\r\n            enabled: true,\r\n            mass: 0\r\n        },\r\n        decals: new Array<DecalData>()\r\n    },\r\n    {\r\n        uuid: uuidv4(),\r\n        type: 'Cube',\r\n        castShadow: true,\r\n        transform: {\r\n            position: [0, 0, 0],\r\n            rotation: [0, Math.PI * 0.1, 0],\r\n            scale: [1, 1, 7],\r\n        },\r\n        geometry: {\r\n            args: [ 1, 1, 1]\r\n        },\r\n        material: {\r\n            color: [0.95, 0.95, 0.95],\r\n            wireframe: false,\r\n            reflectivity: 0.5,\r\n            roughness: 1.0\r\n        },\r\n        physics: {\r\n            enabled: false,\r\n            mass: 1\r\n        },\r\n        decals: new Array<DecalData>()\r\n    },\r\n    {\r\n        uuid: uuidv4(),\r\n        type: 'Cube',\r\n        castShadow: false,\r\n        transform: {\r\n            position: [4.32, -0.68, 5.46],\r\n            rotation: [0, 0, 0],\r\n            scale: [1, 1, 1],\r\n        },\r\n        geometry: {\r\n            args: [ 2, 2, 2]\r\n        },\r\n        material: {\r\n            color: '#4316ba',\r\n            wireframe: false,\r\n            reflectivity: 1.0,\r\n            roughness: 1.0\r\n        },\r\n        physics: {\r\n            enabled: true,\r\n            mass: 2\r\n        },\r\n        decals: [{\r\n            uuid: uuidv4(),\r\n            transform: {\r\n                position: [4.32, -0.68, 5.46],\r\n                rotation: [0, 0, 0],\r\n                scale: [5, 5, 5],\r\n            },\r\n            material: {\r\n                color: '#4316ba',\r\n                wireframe: false,\r\n                reflectivity: 0.5,\r\n                roughness: 1.0\r\n            },\r\n        }]\r\n    },\r\n    // {\r\n    //     uuid: uuidv4(),\r\n    //     type: 'NPoint',\r\n    //     castShadow: false,\r\n    //     transform: {\r\n    //         position: [1, 1, 1],\r\n    //         rotation: [0, 0, 0],\r\n    //         scale: [0.2, 0.2, 0.2],\r\n    //     },\r\n    //     geometry: {\r\n    //         args: [\r\n    //             {x: 5, y: -10},\r\n    //             {x: 6.986693307950612, y: -8},\r\n    //             {x: 8.894183423086506, y: -6},\r\n    //             {x: 10.646424733950354, y: -4},\r\n    //             {x: 12.173560908995228, y: -2},\r\n    //             {x: 13.414709848078965, y: 0},\r\n    //             {x: 14.320390859672264, y: 2},\r\n    //             {x: 14.854497299884603, y: 4},\r\n    //             {x: 14.99573603041505, y: 6},\r\n    //             {x: 14.738476308781951, y: 8}\r\n    //         ]\r\n    //     },\r\n    //     material: {\r\n    //         color: '#4316ba',\r\n    //         wireframe: false,\r\n    //         reflectivity: 1.0\r\n    //     },\r\n    //     physics: {\r\n    //         mass: 2\r\n    //     },\r\n    //     decals: []\r\n    // }\r\n    ]\r\n};\r\nexport const useObjectStore = create(\r\n    combineAndImmer(initialState, (set) => ({\r\n        updateObject: (object: ObjectData, index: number) =>\r\n            set((state) => {\r\n                // state.objects[index] = object;\r\n            }),\r\n        addObject: (object: ObjectData) =>\r\n            set((state) => {\r\n                // state.objects.push(object);\r\n            })\r\n    }))\r\n);\r\n","import * as React from 'react'\r\nimport { Object3D, Camera } from 'three'\r\nimport { useThree, ReactThreeFiber } from '@react-three/fiber'\r\nimport { TransformControls as TransformControlsImpl } from 'three-stdlib'\r\nimport pick from 'lodash.pick'\r\n\r\nexport type MyTransformControls = ReactThreeFiber.Object3DNode<TransformControlsImpl, typeof TransformControlsImpl>\r\n\r\ndeclare global {\r\n    namespace JSX {\r\n        interface IntrinsicElements {\r\n            transformControlsImpl: MyTransformControls\r\n        }\r\n    }\r\n}\r\n\r\ntype Props = MyTransformControls &\r\n    JSX.IntrinsicElements['group'] & {\r\n    enabled: boolean\r\n    axis: string | null\r\n    mode: string\r\n    translationSnap: number | null\r\n    rotationSnap: number | null\r\n    scaleSnap?: number | null\r\n    space: string\r\n    size: number\r\n    dragging: boolean\r\n    showX: boolean\r\n    showY: boolean\r\n    showZ: boolean\r\n    object: Object3D,\r\n    camera: Camera\r\n}\r\n\r\nexport const MyTransformControls = React.forwardRef<TransformControlsImpl, Props>(({ object, ...props }, ref) => {\r\n    const transformOnlyPropNames = [\r\n        'enabled',\r\n        'axis',\r\n        'mode',\r\n        'translationSnap',\r\n        'rotationSnap',\r\n        'scaleSnap',\r\n        'space',\r\n        'size',\r\n        'dragging',\r\n        'showX',\r\n        'showY',\r\n        'showZ',\r\n    ]\r\n\r\n    const { camera, ...rest } = props\r\n    const transformProps = pick(rest, transformOnlyPropNames)\r\n\r\n    const gl = useThree(({ gl }) => gl)\r\n    const defaultCamera = useThree(({ camera }) => camera)\r\n    const invalidate = useThree(({ invalidate }) => invalidate)\r\n\r\n    const explCamera = camera || defaultCamera\r\n\r\n    const [controls] = React.useState(() => new TransformControlsImpl(explCamera, gl.domElement))\r\n\r\n    React.useLayoutEffect(() => void controls?.attach(object as Object3D), [object, controls])\r\n\r\n    React.useEffect(() => {\r\n        controls?.addEventListener?.('change', invalidate)\r\n        return () => controls?.removeEventListener?.('change', invalidate)\r\n    }, [controls, invalidate])\r\n\r\n    return controls ? (\r\n        <>\r\n            <primitive ref={ref} dispose={undefined} object={controls} {...transformProps} />\r\n        </>\r\n    ) : null\r\n})\r\n","import {useBox} from \"@react-three/cannon\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {useControls} from \"leva\";\r\nimport * as THREE from 'three';\r\nimport {Html} from \"@react-three/drei\";\r\nimport {Color, Vector2} from \"three\";\r\nimport {ObjectData} from \"../store/ObjectStore\";\r\n\r\n// @ts-ignore\r\nfunction NPoint(objectData: ObjectData) {\r\n    const [args, setArgs] = useState<Vector2[]>(objectData.geometry.args as Vector2[]);\r\n\r\n    const [position, setPosition] = useState(objectData.transform.position);\r\n    const [rotation, setRotation] = useState(objectData.transform.rotation);\r\n    const [scale, setScale] = useState(objectData.transform.scale);\r\n\r\n    const [castShadow, setCastShadow] = useState(objectData.castShadow);\r\n\r\n    const [color, setColor] = useState(objectData.material.color);\r\n\r\n    const [wireframe, setWireframe] = useState(objectData.material.wireframe);\r\n\r\n    const[reflectivity, setReflectivity] = useState(objectData.material.reflectivity);\r\n\r\n    const [mass, setMass] = useState(objectData.physics.mass);\r\n\r\n    const [ref, api] = useBox(() => ({ mass, position, rotation, scale }));\r\n    const [hovered, setHover] = useState(false)\r\n\r\n\r\n    useEffect(() => {\r\n        api.position.set(position[0], position[1], position[2]);\r\n        api.position.set(rotation[0], rotation[1], rotation[2])\r\n        api.mass?.set(mass);\r\n    }, [position, rotation, mass]);\r\n    const [points, setPoints] = useState(args.map(arg => arg as Vector2));\r\n\r\n    return (\r\n        <mesh name={\"Cube\"} castShadow={castShadow} position={position} rotation={rotation} scale={scale} userData={{\r\n            controls: {\r\n                castShadow: {\r\n                    label: 'Cast Shadow',\r\n                    value: castShadow,\r\n                    onChange: (value: boolean) => {\r\n                        setCastShadow(value);\r\n                    }\r\n                },\r\n                transform: {\r\n                    position: {\r\n                        label: 'Position',\r\n                        value: position,\r\n                        onChange: (value: [number, number, number]) => {\r\n                            setPosition(value);\r\n                        }\r\n                    },\r\n                    rotation: {\r\n                        label: 'Rotation',\r\n                        value: rotation,\r\n                        onChange: (value: [number, number, number]) => {\r\n                            setRotation(value);\r\n                        }\r\n                    },\r\n                    scale: {\r\n                        label: 'Scale',\r\n                        value: scale,\r\n                        onChange: (value: [number, number, number]) => {\r\n                            setScale(value);\r\n                        }\r\n                    }\r\n                },\r\n                geometry: {\r\n                    args: {\r\n                        label: 'Dimension',\r\n                        value: args,\r\n                        min: 0.1,\r\n                        step: 0.2,\r\n                        onChange: (value: any) => {\r\n                            // setArgs(value);\r\n                        }\r\n                    }\r\n                },\r\n                material: {\r\n                    color: {\r\n                        label: 'color',\r\n                        value: color,\r\n                        onChange: (value: string) => {\r\n                            setColor(value);\r\n                        }\r\n                    },\r\n                    wireframe: {\r\n                        label: 'Wireframe',\r\n                        value: wireframe,\r\n                        onChange: (value: boolean) => {\r\n                            setWireframe(value);\r\n                        }\r\n                    },\r\n                    reflectivity: {\r\n                        label: 'Reflectivity',\r\n                        value: reflectivity,\r\n                        onChange: (value: number) => {\r\n                            setReflectivity(value);\r\n                        }\r\n                    }\r\n                },\r\n                physics: {\r\n                    mass: {\r\n                        label: 'Mass',\r\n                        value: mass,\r\n                        onChange: (value: number) => {\r\n                            setMass(value);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }}\r\n              onPointerOver={() => setHover(true)}\r\n              onPointerOut={() => setHover(false)}\r\n        >\r\n            <latheBufferGeometry args={[points]}/>\r\n            <meshPhysicalMaterial color={color} wireframe={wireframe} reflectivity={reflectivity}></meshPhysicalMaterial>\r\n            <Html distanceFactor={10} style={{ pointerEvents: \"none\", display: hovered ? \"block\" : \"none\" }}>\r\n                <div className=\"content\">\r\n                    Mass: {mass}\r\n                </div>\r\n            </Html>\r\n        </mesh>\r\n    )\r\n}\r\nexport default  NPoint;\r\n","import {useBox, usePlane} from \"@react-three/cannon\";\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport * as THREE from \"three\";\r\nimport {ObjectData} from \"../store/ObjectStore\";\r\nimport {Mesh} from \"three\";\r\nimport DecalData from \"../store/DecalData\";\r\n\r\n// @ts-ignore\r\nfunction Plane(objectData: ObjectData) {\r\n    const [args, setArgs] = useState<[]>(objectData.geometry.args);\r\n\r\n    const [position, setPosition] = useState(objectData.transform.position);\r\n    const [rotation, setRotation] = useState(objectData.transform.rotation);\r\n    const [scale, setScale] = useState(objectData.transform.scale);\r\n\r\n    const [castShadow, setCastShadow] = useState(objectData.castShadow);\r\n\r\n    const [color, setColor] = useState(objectData.material.color);\r\n    const [wireframe, setWireframe] = useState(objectData.material.wireframe);\r\n    const[reflectivity, setReflectivity] = useState(objectData.material.reflectivity);\r\n\r\n    const [mass, setMass] = useState(objectData.physics.mass);\r\n    const userData = {\r\n        controls: {\r\n            castShadow: {\r\n                label: 'Cast Shadow',\r\n                    value: castShadow,\r\n                    onChange: (value: boolean) => {\r\n                    setCastShadow(value);\r\n                }\r\n            },\r\n            transform: {\r\n                position: {\r\n                    label: 'Position',\r\n                        value: position,\r\n                        onChange: (value: [number, number, number]) => {\r\n                        setPosition(value);\r\n                    }\r\n                },\r\n                rotation: {\r\n                    label: 'Rotation',\r\n                        value: rotation,\r\n                        onChange: (value: [number, number, number]) => {\r\n                        setRotation(value);\r\n                    }\r\n                },\r\n                scale: {\r\n                    label: 'Scale',\r\n                        value: scale,\r\n                        onChange: (value: [number, number, number]) => {\r\n                        setScale(value);\r\n                    },\r\n                        lock: true\r\n                }\r\n            },\r\n            geometry: {\r\n                args: {\r\n                    label: 'Dimension',\r\n                        value: args,\r\n                        min: 0.1,\r\n                        step: 0.2,\r\n                        onChange: (value: any) => {\r\n                        setArgs(value);\r\n                    }\r\n                }\r\n            },\r\n            material: {\r\n                color: {\r\n                    label: 'color',\r\n                        value: color,\r\n                        onChange: (value: string) => {\r\n                        setColor(value);\r\n                    }\r\n                },\r\n                wireframe: {\r\n                    label: 'Wireframe',\r\n                        value: wireframe,\r\n                        onChange: (value: boolean) => {\r\n                        setWireframe(value);\r\n                    }\r\n                },\r\n                reflectivity: {\r\n                    label: 'Reflectivity',\r\n                        value: reflectivity,\r\n                        onChange: (value: number) => {\r\n                        setReflectivity(value);\r\n                    }\r\n                }\r\n            },\r\n            physics: {\r\n                mass: {\r\n                    label: 'Mass',\r\n                        value: mass,\r\n                        onChange: (value: number) => {\r\n                        setMass(value);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const [ref, api] = usePlane(() => ({ mass }));\r\n\r\n    useEffect(() => {\r\n        api.position.set(position[0], position[1], position[2]);\r\n        api.rotation.set(rotation[0], rotation[1], rotation[2])\r\n        api.mass?.set(mass);\r\n    }, [position, rotation, mass]);\r\n    return (\r\n        <>\r\n            <mesh ref={ref} name={\"Plane\"} castShadow={castShadow} scale={scale} userData={userData}>\r\n                <planeBufferGeometry args={args}/>\r\n                <meshPhysicalMaterial color={color} wireframe={wireframe} reflectivity={reflectivity}></meshPhysicalMaterial>\r\n            </mesh>\r\n        </>)\r\n}\r\nexport default Plane;\r\n","import {OrbitControls} from \"@react-three/drei\";\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport {button, buttonGroup, folder, LevaInputs, useControls} from \"leva\";\r\nimport {useThree} from \"@react-three/fiber\";\r\nimport Dodecahedron from \"../shapes/Dodecahedron\";\r\nimport * as THREE from 'three';\r\nimport Cube from \"../shapes/Cube\";\r\nimport {ObjectData, useObjectStore} from \"../store/ObjectStore\";\r\nimport {MyTransformControls} from \"./MyTransformControls\";\r\nimport NPoint from \"../shapes/NPoint\";\r\nimport {Object3D, Vector2, Vector3} from \"three\";\r\nimport {DimensionsIcon} from \"@radix-ui/react-icons\";\r\nimport { plot } from '@leva-ui/plugin-plot';\r\nimport Plane from \"../shapes/Plane\";\r\nimport niceColors from 'nice-color-palettes'\r\n\r\nconst TransformControlsLock = () => {\r\n\r\n    const { raycaster, mouse, camera, scene, gl } = useThree();\r\n    const reduce = (objects: Object3D[], into: Object): {  } => {\r\n        return objects.reduce((obj, child, i) => {\r\n                const schema = {\r\n                    // [`${child.type}_${child.name}`]: button(() => alert(child.id))\r\n                    [`${child.type}_${child.uuid}_uuid`]: {\r\n                        label: 'id',\r\n                        value: child.uuid,\r\n                        type: LevaInputs.STRING\r\n                    }\r\n                };\r\n                if(child.name){\r\n                    schema[`${child.type}_${child.name}_name`]= {\r\n                        label: 'name',\r\n                        value: child.name,\r\n                        type: LevaInputs.STRING\r\n                    }\r\n                }\r\n                const s = {[`Select_${child.uuid.substr(0, 4)}`]: button(() => setSelectedObject(scene.getObjectById(child.id)))}\r\n                // console.log(child);\r\n                reduce(child.children, {s});\r\n                const p = {\r\n                    [`${child.type}_${child.uuid.substr(0, 4)}`]: folder(s, {collapsed: false})\r\n                }\r\n\r\n                return Object.assign(obj, p);\r\n            },\r\n            into);\r\n    }\r\n    const sc = {'Scene': {\r\n            label: 'uuid',\r\n            value: scene.id,\r\n            type: LevaInputs.STRING\r\n        }};\r\n    reduce(scene.children, sc);\r\n    useControls('Scene', sc, [scene, scene.children]);\r\n\r\n    // @ts-ignore\r\n    const [{mode}, setMode] = useControls('Transform', () => ({\r\n        mode: {\r\n            label: 'Mode',\r\n            value: 'translate',\r\n            options: {\r\n                scale: 'scale',\r\n                rotate: 'rotate',\r\n                translate: 'translate'\r\n            },\r\n            // render: (get) => selectedObject != null\r\n        },\r\n        'Preset': buttonGroup({\r\n            label: <DimensionsIcon/>,\r\n            opts: {\r\n            'Translate': () => setMode({ mode: 'translate' }),\r\n            'Rotate': () => setMode({ mode: 'rotate' }),\r\n            'Scale': () => setMode({ mode: 'scale' }),\r\n        }})\r\n    }));\r\n\r\n    const [selectedObject, setSelectedObject] = useState<THREE.Object3D>();\r\n\r\n    const orbitControls = useRef<any>(null!);\r\n    const transformControls =  useRef<any>(null!);\r\n\r\n    useEffect(() => {\r\n        if(transformControls.current && orbitControls.current) {\r\n            const {current: controls} = transformControls;\r\n            const callback = (event: any) => {\r\n                orbitControls.current.enabled = !event.value;\r\n                if (mode === \"translate\" && !event.value) {\r\n                    setTransform({position: (transformControls.current?.object as THREE.Object3D).position.toArray()});\r\n                }\r\n                if (mode === \"rotate\" && !event.value) {\r\n                    const orientation = (transformControls.current?.object as THREE.Object3D).rotation;\r\n                    // setTransform({rotation: [orientation.x, orientation.y, orientation.z]});\r\n                }\r\n                if (mode === \"scale\" && !event.value) {\r\n                    // setTransform({scale: (transformControls.current?.object as THREE.Object3D).scale.toArray()});\r\n                }\r\n            }\r\n            controls.addEventListener('dragging-changed', callback)\r\n            return () => controls.removeEventListener('dragging-changed', callback)\r\n        }\r\n    })\r\n\r\n    const object = selectedObject?.userData.controls || {};\r\n    const [, setObject] = useControls('Mesh', () => (object) , [selectedObject]);\r\n\r\n    const transform = selectedObject?.userData.controls?.transform || {\r\n        position: {\r\n            label: 'Position',\r\n            value: [0, 0, 0],\r\n            onChange: (value: Vector3) => {\r\n                // selectedObject?.position.set(value.x, value.y, value.z);\r\n            }\r\n        },\r\n        rotation : [0, 0, 0],\r\n        scale: [1, 1, 1]};\r\n    const [, setTransform] = useControls('Transform', () => (transform), [selectedObject]);\r\n\r\n    const [args, setArgs] = useState<any[]>([])\r\n    const inputs = args\r\n        .reduce((control, _, i) =>{\r\n            return Object.assign(control, { [`Point_${i}`]: {\r\n                label: `Point_${i}`,\r\n                value:_,\r\n                onChange: (value: number) => {\r\n                    // args[i] = value as any;\r\n                    // selectedObject?.userData.controls.geometry.args.onChange(args);\r\n                    console.log(value);\r\n                }\r\n            } })\r\n        }, {})\r\n    const values = useControls('Geometry', inputs, [args])\r\n\r\n    const geometry = selectedObject?.userData.controls?.geometry || {};\r\n    const [, setGeometry] = useControls('Geometry', () => (geometry), [selectedObject]);\r\n\r\n    const material = selectedObject?.userData.controls?.material || {};\r\n    const [, setMaterial] = useControls('Material', () => (material), [selectedObject]);\r\n\r\n    const physics = selectedObject?.userData.controls?.physics || {};\r\n    const [, setPhysics] = useControls('Physics', () => (physics), [selectedObject]);\r\n\r\n    // const { y } = useControls({\r\n    //     i: 100,\r\n    //     y: plot({ expression: 'cos(x)' })\r\n    // }, {})\r\n    // useControls('Labels', {\r\n    //     label: {\r\n    //         image: ''\r\n    //     },\r\n    //     Apply: button(() => alert('click'))\r\n    // });\r\n\r\n    useEffect(() => {\r\n        if(selectedObject){\r\n            console.log(selectedObject.position)\r\n            const orientation = selectedObject.rotation;\r\n            setTransform({position: selectedObject.position.toArray()});\r\n            setTransform({rotation: [orientation.x, orientation.y, orientation.z]});\r\n            setTransform({scale: selectedObject.scale.toArray()});\r\n            if(selectedObject.userData.controls){\r\n                setObject({castShadow: selectedObject.userData.controls.castShadow?.value});\r\n\r\n                // const arg = selectedObject.userData.controls.geometry.args.value[0];\r\n                //\r\n                // if(typeof arg === 'number'){\r\n                //     // setArgs([]);\r\n                //     setGeometry({args: selectedObject.userData.controls.geometry.args.value});\r\n                // } else if(typeof arg === 'object') {\r\n                //     setArgs(selectedObject.userData.controls.geometry.args.value);\r\n                //     setGeometry({args: []});\r\n                // }\r\n                setMaterial({ color: selectedObject.userData.controls.material.color.value});\r\n                setMaterial({ wireframe: selectedObject.userData.controls.material.wireframe.value});\r\n                setPhysics({enabled: selectedObject.userData.controls.physics?.enabled?.value});\r\n                setPhysics({mass: selectedObject.userData.controls.physics.mass.value});\r\n\r\n            }else{\r\n\r\n            }\r\n\r\n        } else {\r\n            // setMaterialControls([]);\r\n        }\r\n    },[selectedObject]);\r\n\r\n\r\n    const objects: ObjectData[] = useObjectStore((state: any) => state.objects);\r\n\r\n    const onPointerDown = (event: PointerEvent) => {\r\n        mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\r\n        mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;\r\n\r\n        raycaster.setFromCamera(mouse, camera);\r\n        const intersects = raycaster.intersectObjects(scene.children).filter(intersect => intersect.object.type === 'Mesh');\r\n        // .sort((a, b) => a.distance < b.distance ? 1: -1);\r\n        if (intersects.length) {\r\n            const object = intersects[0].object;\r\n            if(object.userData){\r\n                setSelectedObject(object);\r\n            }\r\n        }\r\n\r\n    }\r\n    document.addEventListener( 'pointerdown', onPointerDown );\r\n    const renderObject = (objectData: ObjectData, index: number) => {\r\n        switch (objectData.type) {\r\n            case \"Plane\":\r\n                return <Plane key={index} {...objectData}/>;\r\n            case \"Cube\":\r\n                return <Cube key={index} {...objectData}/>;\r\n            case \"NPoint\":\r\n                return <NPoint key={index} {...objectData}/>;\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            {selectedObject && <MyTransformControls\r\n                ref={transformControls}\r\n                enabled={true}\r\n                position={selectedObject.position}\r\n                rotation={selectedObject.rotation}\r\n                scale={selectedObject.scale}\r\n                mode={mode}\r\n                camera={camera}\r\n                showX={true}\r\n                showY={true}\r\n                showZ={true}\r\n                size={1}\r\n                space={\"local\"}\r\n                axis={null}\r\n                translationSnap={null}\r\n                rotationSnap={null}\r\n                scaleSnap={null}\r\n                dragging\r\n                castShadow receiveShadow\r\n                object={selectedObject}\r\n            >\r\n            </MyTransformControls>\r\n            }\r\n            <OrbitControls\r\n                ref={orbitControls}\r\n                // enableDamping={true}\r\n                // dampingFactor={0.25}\r\n                // rotateSpeed={0.4}\r\n                // keyPanSpeed={0.4}\r\n                // screenSpacePanning={true}\r\n                // zoomSpeed={0.6}\r\n                // enablePan={true}\r\n                // panSpeed={0.4}\r\n                // minPolarAngle={Math.PI / 4}\r\n                // maxPolarAngle={Math.PI / 2}\r\n                // minDistance={-500}\r\n                // maxDistance={1000}\r\n            />\r\n            <Dodecahedron time={0} />\r\n            {objects.map(renderObject)}\r\n            {/*<Plane color={niceColors[17][1]} args={[20,20]} position={[0, -10, 0]} rotation={[-Math.PI / 2, 0, 0]}/>*/}\r\n        </>\r\n\r\n        )\r\n}\r\nexport default TransformControlsLock;\r\n","import Plane from \"../shapes/Plane\";\r\nimport {Physics} from \"@react-three/cannon\";\r\nimport React, {useEffect} from \"react\";\r\nimport {button, buttonGroup, folder, LevaInputs, useControls} from \"leva\";\r\nimport niceColors from 'nice-color-palettes'\r\nimport {useThree} from \"@react-three/fiber\";\r\nimport TransformControlsLock from \"../three-extension/TransformControlsLock\";\r\nimport {ACESFilmicToneMapping, Object3D} from \"three\";\r\nimport {DimensionsIcon, InputIcon} from \"@radix-ui/react-icons\";\r\n//@ts-ignore\r\nimport { RayTracingRenderer } from 'ray-tracing-renderer'\r\nimport {useTransform} from \"leva/plugin\";\r\n\r\n\r\n// @ts-ignore\r\nconst BasicScene = () => {\r\n    const { raycaster, mouse, camera, scene, gl } = useThree();\r\n\r\n\r\n    useTransform();\r\n    console.log(gl.domElement);\r\n\r\n    const canvasRef = React.useRef() as React.MutableRefObject<HTMLCanvasElement>;\r\n    const hoverinc = new RayTracingRenderer({\r\n        canvas: gl.domElement,\r\n        antialias: true,\r\n        alpha: true,\r\n    });\r\n    hoverinc.setSize(window.innerWidth, window.innerHeight);\r\n\r\n    const tick = () => {\r\n        hoverinc.render(scene, camera);\r\n        requestAnimationFrame(tick);\r\n    }\r\n\r\n\r\n    // @ts-ignore\r\n    const [{renderer}, setRenderer] = useControls('Renderer', () => ({\r\n        renderer: {\r\n            label: 'Provider',\r\n            value: 'webgl',\r\n            options: {\r\n                webgl: 'webgl',\r\n                hoverinc: 'hoverinc',\r\n                erichlof: 'erichlof'\r\n            },\r\n            onChange(value: string) {\r\n                if(value === 'hoverinc'){\r\n                    tick();\r\n                    hoverinc.gammaOutput = true;\r\n                    hoverinc.gammaFactor = 2.2;\r\n                    hoverinc.setPixelRatio(1.0);\r\n                    hoverinc.toneMapping = ACESFilmicToneMapping;\r\n                    hoverinc.toneMappingExposure = 1.5;\r\n                    hoverinc.renderWhenOffFocus = false;\r\n                    hoverinc.bounces = 3;\r\n                    hoverinc.render(scene, camera);\r\n                }\r\n            }\r\n            // render: (get) => selectedObject != null\r\n        },\r\n        'Preset': buttonGroup({\r\n            label: <InputIcon/>,\r\n            opts: {\r\n                'webgl': () => setRenderer({ renderer: 'webgl' }),\r\n                'hoverinc': () => setRenderer({ renderer: 'hoverinc' }),\r\n                'erichlof': () => setRenderer({ renderer: 'erichlof' }),\r\n            }})\r\n    }));\r\n\r\n    return (\r\n\r\n        <>\r\n            <Physics>\r\n                <TransformControlsLock></TransformControlsLock>\r\n                {/*<Dodecahedron time={0}/>*/}\r\n            </Physics>\r\n            {/*<canvas ref={canvasRef}></canvas>*/}\r\n        </>\r\n\r\n    )\r\n}\r\nexport default BasicScene;\r\n","import React, {Suspense, useEffect, useRef, useState} from \"react\"\r\nimport {Camera, Canvas, extend, useFrame, useThree, render} from \"@react-three/fiber\"\r\nimport * as THREE from \"three\"\r\nimport { Html, OrbitControls, TransformControls } from \"@react-three/drei\"\r\nimport './App.css';\r\nimport {Color, OrthographicCamera} from \"three\";\r\nimport {ThreeEvent} from \"@react-three/fiber/dist/declarations/src/core/events\";\r\nimport {buttonGroup, useControls} from \"leva\";\r\nimport BasicScene from \"./scene/BasicScene\";\r\nimport TransformControlsLock from \"./three-extension/TransformControlsLock\";\r\nimport {EffectComposer, SelectiveBloom} from \"@react-three/postprocessing\";\r\nimport {InputIcon, DimensionsIcon} from \"@radix-ui/react-icons\";\r\nimport {Popover, PopoverContent, PopoverTrigger} from \"./three-extension/Popover\";\r\n\r\nconst Fallback = () => (\r\n    <Html>\r\n        <div className=\"loading\">Loading...</div>\r\n    </Html>\r\n)\r\n\r\nfunction App() {\r\n    const [selectedObject, setSelectedObject] = useState<THREE.Object3D>();\r\n\r\n\r\n    return (\r\n        <>\r\n            <Canvas style={{ background: \"#BFD1E5\" }} camera={{ position: [10, 5, 10], rotation:[0, 0, 0], fov: 50 }}\r\n                    gl={{ alpha: false }}\r\n                    // raycaster={{ filter: (intersects, state) => intersects.reverse()}}\r\n            >\r\n\r\n                <axesHelper args={[20]}/>\r\n                <pointLight color={new Color('indianred')} />\r\n                <pointLight position={[10, 10, -10]} color={new Color('orange')} />\r\n                <pointLight position={[-10, -10, 10]} color={new Color('lightblue')} />\r\n                <Suspense fallback={<Fallback />}>\r\n                    <BasicScene />\r\n                </Suspense>\r\n                {/*<EffectComposer>*/}\r\n                {/*    <SelectiveBloom luminanceThreshold={0} luminanceSmoothing={0.9} height={300} />*/}\r\n                {/*</EffectComposer>*/}\r\n            </Canvas>\r\n        </>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}