{"version":3,"sources":["Fallback.tsx","three-extension/MyTransformControls.tsx","three-extension/MyDecal.tsx","loader/BlockLoader.tsx","loader/GroupLoader.tsx","three-extension/TransformControlsLock.tsx","loader/SceneLoader.tsx","editor/SceneEditor.tsx","App.tsx","store/ObjectStore.tsx","reportWebVitals.ts","index.tsx"],"names":["Fallback","Html","className","MyTransformControls","React","ref","object","props","camera","rest","transformProps","pick","gl","useThree","defaultCamera","invalidate","explCamera","TransformControlsImpl","domElement","controls","attach","addEventListener","removeEventListener","dispose","undefined","MyDecal","useState","decalData","transform","position","setPosition","rotation","setRotation","scale","setScale","geometry","scene","DecalGeometry","mesh","Vector3","Euler","texture_1","useTexture","material","MeshPhysicalMaterial","map","normalScale","Vector2","transparent","depthTest","depthWrite","polygonOffset","polygonOffsetFactor","wireframe","side","FrontSide","reflectivity","roughness","useRef","name","userData","label","value","onChange","console","log","min","step","lock","onUpdate","self","needsUpdate","BlockLoader","config","args","setArgs","color","setColor","setWireframe","setReflectivity","length","width","shape","THREE","moveTo","lineTo","extrudeSettings","steps","depth","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","points","i","push","Math","sin","type","renderGeometry","DoubleSide","decals","index","current","GroupLoader","castShadow","receiveShadow","physics","enabled","setEnabled","mass","setMass","hovered","setHover","useBox","render","get","onPointerOver","onPointerOut","objects","distanceFactor","style","pointerEvents","display","Plane","usePlane","PI","TransformControlsLock","raycaster","mouse","sc","id","LevaInputs","STRING","reduce","into","obj","child","schema","uuid","s","substr","button","setSelectedObject","getObjectById","children","p","folder","collapsed","Object","assign","useControls","mode","options","rotate","translate","buttonGroup","opts","setMode","selectedObject","orbitControls","transformControls","useEffect","callback","event","objectProps","setObjectProps","setTransform","inputs","control","_","setGeometry","setMaterial","orientation","toArray","x","y","z","useObjectStore","state","models","groups","document","clientX","window","innerWidth","clientY","innerHeight","setFromCamera","intersects","intersectObjects","filter","intersect","showX","showY","showZ","size","space","axis","translationSnap","rotationSnap","scaleSnap","dragging","OrbitControls","Environment","preset","background","group","disabled","SceneLoader","useTransform","hoverinc","RayTracingRenderer","canvas","getElementById","antialias","alpha","setSize","tick","requestAnimationFrame","renderer","webgl","erichlof","gammaOutput","gammaFactor","setPixelRatio","toneMapping","ACESFilmicToneMapping","toneMappingExposure","renderWhenOffFocus","bounces","setRenderer","setX","setY","setZ","set","fov","SceneEditor","height","lights","fallback","sceneConfig","create","initialState","api","combine","fn","produce","immer","updateObject","addObject","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.327ddab7.chunk.js","sourcesContent":["import {Html} from \"@react-three/drei\";\r\nimport React from \"react\";\r\n\r\nconst Fallback = () => {\r\n    return(<Html>\r\n        <div className=\"loading\">Loading...</div>\r\n    </Html>)\r\n}\r\nexport default Fallback;\r\n","import * as React from 'react'\r\nimport { Object3D, Camera } from 'three'\r\nimport { useThree, ReactThreeFiber } from '@react-three/fiber'\r\nimport { TransformControls as TransformControlsImpl } from 'three-stdlib'\r\nimport pick from 'lodash.pick'\r\n\r\nexport type MyTransformControls = ReactThreeFiber.Object3DNode<TransformControlsImpl, typeof TransformControlsImpl>\r\n\r\ndeclare global {\r\n    namespace JSX {\r\n        interface IntrinsicElements {\r\n            transformControlsImpl: MyTransformControls\r\n        }\r\n    }\r\n}\r\n\r\ntype Props = MyTransformControls &\r\n    JSX.IntrinsicElements['group'] & {\r\n    enabled: boolean\r\n    axis: string | null\r\n    mode: string\r\n    translationSnap: number | null\r\n    rotationSnap: number | null\r\n    scaleSnap?: number | null\r\n    space: string\r\n    size: number\r\n    dragging: boolean\r\n    showX: boolean\r\n    showY: boolean\r\n    showZ: boolean\r\n    object: Object3D,\r\n    camera: Camera\r\n}\r\n\r\nexport const MyTransformControls = React.forwardRef<TransformControlsImpl, Props>(({ object, ...props }, ref) => {\r\n    const transformOnlyPropNames = [\r\n        'enabled',\r\n        'axis',\r\n        'mode',\r\n        'translationSnap',\r\n        'rotationSnap',\r\n        'scaleSnap',\r\n        'space',\r\n        'size',\r\n        'dragging',\r\n        'showX',\r\n        'showY',\r\n        'showZ',\r\n    ]\r\n\r\n    const { camera, ...rest } = props\r\n    const transformProps = pick(rest, transformOnlyPropNames)\r\n\r\n    const gl = useThree(({ gl }) => gl)\r\n    const defaultCamera = useThree(({ camera }) => camera)\r\n    const invalidate = useThree(({ invalidate }) => invalidate)\r\n\r\n    const explCamera = camera || defaultCamera\r\n\r\n    const [controls] = React.useState(() => new TransformControlsImpl(explCamera, gl.domElement))\r\n\r\n    React.useLayoutEffect(() => void controls?.attach(object as Object3D), [object, controls])\r\n\r\n    React.useEffect(() => {\r\n        controls?.addEventListener?.('change', invalidate)\r\n        return () => controls?.removeEventListener?.('change', invalidate)\r\n    }, [controls, invalidate])\r\n\r\n    return controls ? (\r\n        <>\r\n            <primitive ref={ref} dispose={undefined} object={controls} {...transformProps} />\r\n        </>\r\n    ) : null\r\n})\r\n","import {\r\n    BoxGeometry,\r\n    BufferGeometry,\r\n    Euler, FrontSide,\r\n    ImageUtils,\r\n    Mesh,\r\n    MeshBasicMaterial,\r\n    MeshPhysicalMaterial, TextureLoader,\r\n    Vector2,\r\n    Vector3\r\n} from \"three\";\r\nimport {useEffect, useRef, useState} from \"react\";\r\nimport {DecalGeometry} from \"three/examples/jsm/geometries/DecalGeometry\";\r\nimport {useLoader, useThree} from \"@react-three/fiber\";\r\nimport {MeshPhysicalMaterialParameters} from \"three/src/materials/MeshPhysicalMaterial\";\r\nimport {useTexture} from \"@react-three/drei\";\r\nimport DecalConfig from \"../models/DecalConfig\";\r\n\r\nexport interface MyDecalProps {\r\n    mesh: Mesh;\r\n    decalData: DecalConfig;\r\n}\r\nconst MyDecal = (props: MyDecalProps) => {\r\n    // console.log(props.mesh.geometry.isBufferGeometry);\r\n    // const [args, setArgs] = useState<[]>(decalDate.geometry.args);\r\n    const [position, setPosition] = useState<[number, number, number]>(props.decalData.transform.position);\r\n    const [rotation, setRotation] = useState<[number, number, number]>(props.decalData.transform.rotation);\r\n    const [scale, setScale] = useState<[number, number, number]>(props.decalData.transform.scale);\r\n\r\n    const { scene } = useThree();\r\n    const geometry =  new DecalGeometry(props.mesh, new Vector3(position[0], position[1], position[2]), new Euler(rotation[0], rotation[1], rotation[2]), new Vector3(scale[0], scale[1], scale[2]));\r\n\r\n    const texture_1 = useTexture('https://assets.website-files.com/6049feb0a862ecb2aaeba05e/609bd2dc3c026a426c63fb0a_BG.png');\r\n    const material = new MeshPhysicalMaterial({\r\n        // specular: 0xffffff,\r\n        // shininess: 10,\r\n        map: texture_1,\r\n        normalScale: new Vector2( .15, .15 ),\r\n        transparent: true,\r\n        depthTest: true,\r\n        depthWrite: false,\r\n        polygonOffset: true,\r\n        polygonOffsetFactor: -4,\r\n        wireframe: props.decalData.material.wireframe,\r\n        side: FrontSide,\r\n        reflectivity: props.decalData.material.reflectivity,\r\n        roughness: props.decalData.material.roughness\r\n    });\r\n    // const test = useUpdate(() => {\r\n    //\r\n    // })\r\n    const ref = useRef<Mesh>(null!);\r\n    // const [currentGeometry, setCurrentGeometry] = useState<any>();\r\n    // useEffect(() => {\r\n    //     if(props.mesh && geometry !== props.mesh.geometry){\r\n    //         console.log(scale);\r\n    //         // const geo = new DecalGeometry(props.mesh, new Vector3(position[0], position[1], position[2]), new Euler(rotation[0], rotation[1], rotation[2]), new Vector3(scale[0], scale[1], scale[2]));\r\n    //         if(ref.current.geometry){\r\n    //             ref.current.geometry.dispose();\r\n    //             // ref.current.geometry = geo;\r\n    //             (ref.current as any).needsUpdate = true;\r\n    //         }\r\n    //     }\r\n    // })\r\n    // const geometry = new BoxGeometry(1,1, 1);\r\n    return(\r\n        <mesh ref={ref} name=\"Decal\" material={material} userData={{\r\n            controls: {\r\n                // castShadow: {\r\n                //     label: 'Cast Shadow',\r\n                //     value: castShadow,\r\n                //     onChange: (value: boolean) => {\r\n                //         setCastShadow(value);\r\n                //     }\r\n                // },\r\n                transform: {\r\n                    position: {\r\n                        label: 'Position',\r\n                        value: position,\r\n                        onChange: (value: [number, number, number]) => {\r\n                            console.log(position)\r\n                            setPosition(value);\r\n                        }\r\n                    },\r\n                    rotation: {\r\n                        label: 'Rotation',\r\n                        value: rotation,\r\n                        onChange: (value: [number, number, number]) => {\r\n                            setRotation(value);\r\n                        }\r\n                    },\r\n                    scale: {\r\n                        label: 'Scale',\r\n                        value: scale,\r\n                        min: 0.1,\r\n                        step: 0.1,\r\n                        onChange: (value: [number, number, number]) => {\r\n                            setScale(value);\r\n                        },\r\n                        lock: true\r\n                    }\r\n                },\r\n                // geometry: {\r\n                //     args: {\r\n                //         label: 'Dimension',\r\n                //         value: args,\r\n                //         min: 0.1,\r\n                //         step: 0.2,\r\n                //         onChange: (value: any) => {\r\n                //             setArgs(value);\r\n                //         }\r\n                //     }\r\n                // },\r\n                // material: {\r\n                //     color: {\r\n                //         label: 'color',\r\n                //         value: color,\r\n                //         onChange: (value: string) => {\r\n                //             setColor(value);\r\n                //         }\r\n                //     },\r\n                //     wireframe: {\r\n                //         label: 'Wireframe',\r\n                //         value: wireframe,\r\n                //         onChange: (value: boolean) => {\r\n                //             setWireframe(value);\r\n                //         }\r\n                //     },\r\n                //     reflectivity: {\r\n                //         label: 'Reflectivity',\r\n                //         value: reflectivity,\r\n                //         onChange: (value: number) => {\r\n                //             setReflectivity(value);\r\n                //         }\r\n                //     }\r\n                // },\r\n                // physics: {\r\n                //     mass: {\r\n                //         label: 'Mass',\r\n                //         value: mass,\r\n                //         onChange: (value: number) => {\r\n                //             setMass(value);\r\n                //         }\r\n                //     }\r\n                // }\r\n            }\r\n        }} onUpdate={(self: any) => self.needsUpdate = true}>\r\n            {geometry && <primitive attach={\"geometry\"} object={geometry}/> }\r\n        </mesh>\r\n        // <mesh name=\"Decal\">\r\n        //     <primitive attach={\"geometry\"} object={geometry}/>\r\n        //     <meshPhysicalMaterial color={0x00ff00}></meshPhysicalMaterial>\r\n        // </mesh>\r\n    )\r\n}\r\nexport default MyDecal;\r\n","import {useBox, usePlane} from \"@react-three/cannon\";\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport {Color, DoubleSide, Mesh} from \"three\";\r\nimport MyDecal from \"../three-extension/MyDecal\";\r\nimport DecalConfig from \"../models/DecalConfig\";\r\nimport {BlockConfig} from \"../models/BlockConfig\";\r\nimport * as THREE from \"three\";\r\n\r\n// @ts-ignore\r\nfunction BlockLoader(config: BlockConfig) {\r\n    const [args, setArgs] = useState<Array<any>>(config.geometry.args);\r\n\r\n    const [position, setPosition] = useState(config.transform.position);\r\n    const [rotation, setRotation] = useState(config.transform.rotation);\r\n    const [scale, setScale] = useState(config.transform.scale);\r\n\r\n    const [color, setColor] = useState(config.material.color);\r\n    const [wireframe, setWireframe] = useState(config.material.wireframe);\r\n    const[reflectivity, setReflectivity] = useState(config.material.reflectivity);\r\n\r\n    const mesh = useRef<Mesh>(null!)\r\n    const renderDecal = (decalData: DecalConfig, index: number) => {\r\n        if(mesh.current){\r\n            return <MyDecal key={index} mesh={mesh.current} decalData={decalData}/>\r\n        }\r\n    }\r\n\r\n    // @ts-ignore\r\n    const length = args[0];\r\n    // @ts-ignore\r\n    const width = args[1];\r\n    const shape = new THREE.Shape();\r\n    shape.moveTo( 0,0 );\r\n    // @ts-ignore\r\n    shape.lineTo( 0, width );\r\n    // @ts-ignore\r\n    shape.lineTo( length, width );\r\n    // @ts-ignore\r\n    shape.lineTo( length, 0 );\r\n    shape.lineTo( 0, 0 );\r\n\r\n    // @ts-ignore\r\n    const extrudeSettings = {\r\n        steps: 2,\r\n        depth: args[2],\r\n        bevelEnabled: true,\r\n        bevelThickness: 0.1,\r\n        bevelSize: 0.1,\r\n        bevelOffset: 0,\r\n        bevelSegments: 1\r\n    };\r\n\r\n    const points = [new THREE.Vector2( 0, 0) ];\r\n    for ( let i = 0; i < 10; i ++ ) {\r\n        points.push( new THREE.Vector2( Math.sin( i * 0.2 ) * 10 + 5, ( i - 5 ) * 2 ) );\r\n    }\r\n\r\n    const renderGeometry = () => {\r\n        switch (config.type) {\r\n            case \"Box\":\r\n                // @ts-ignore\r\n                return <boxBufferGeometry args={args}/>\r\n            case \"Circle\":\r\n                // @ts-ignore\r\n                return <circleBufferGeometry args={args} />\r\n            case \"Cone\":\r\n                // @ts-ignore\r\n                return <coneBufferGeometry args={args} />\r\n            case \"Cylinder\":\r\n                // @ts-ignore\r\n                return <cylinderBufferGeometry args={args}/>\r\n            case \"Dodecahedron\":\r\n                // @ts-ignore\r\n                return <dodecahedronBufferGeometry args={args} />\r\n            case \"Edges\":\r\n                // @ts-ignore\r\n                return <edgesGeometry args={args}/>\r\n            case \"Extruded\":\r\n                return <extrudeBufferGeometry args={[shape, extrudeSettings]}></extrudeBufferGeometry>\r\n            case \"Ground\":\r\n                // @ts-ignore\r\n                return <planeBufferGeometry args={args}/>;\r\n            case \"Icosahedron\":\r\n                // @ts-ignore\r\n                return <icosahedronBufferGeometry args={args}/>\r\n            case \"Lathe\":\r\n                return <latheBufferGeometry args={[points]}></latheBufferGeometry>\r\n            case \"Octahedron\":\r\n                // @ts-ignore\r\n                return <octahedronBufferGeometry args={args} />\r\n            case \"Parametric\":\r\n                // @ts-ignore\r\n                return <parametricBufferGeometry args={args}/>\r\n            case \"Plane\":\r\n                // @ts-ignore\r\n                return <planeBufferGeometry args={args}/>;\r\n            case \"Polyhedron\":\r\n                // @ts-ignore\r\n                return <polyhedronBufferGeometry args={args}/>\r\n            case \"Ring\":\r\n                // @ts-ignore\r\n                return <ringBufferGeometry args={args} />\r\n            case \"Shape\":\r\n                // @ts-ignore\r\n                return <shapeBufferGeometry args={args} />\r\n            case \"Sphere\":\r\n                // @ts-ignore\r\n                return <sphereBufferGeometry args={args} />\r\n            case \"Tetrahedron\":\r\n                // @ts-ignore\r\n                return <tetrahedronBufferGeometry args={args}/>\r\n            case \"Text\":\r\n                // @ts-ignore\r\n                return <textBufferGeometry args={args} />\r\n            case \"Torus\":\r\n                // @ts-ignore\r\n                return <torusBufferGeometry args={args}/>\r\n            case \"TorusKnot\":\r\n                // @ts-ignore\r\n                return <torusKnotBufferGeometry args={args}/>\r\n            case \"Tube\":\r\n                // @ts-ignore\r\n                return <tubeBufferGeometry args={args} />\r\n            case \"Wireframe\":\r\n                // @ts-ignore\r\n                return <wireframeGeometry args={args}/>\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <mesh ref={mesh} name={config.name} position={position} rotation={rotation} scale={scale} userData={{\r\n                controls: {\r\n                    transform: {\r\n                        position: {\r\n                            label: 'Position',\r\n                            value: position,\r\n                            onChange: (value: [number, number, number]) => {\r\n                                setPosition(value);\r\n                            }\r\n                        },\r\n                        rotation: {\r\n                            label: 'Rotation',\r\n                            value: rotation,\r\n                            onChange: (value: [number, number, number]) => {\r\n                                setRotation(value);\r\n                            }\r\n                        },\r\n                        scale: {\r\n                            label: 'Scale',\r\n                            value: scale,\r\n                            onChange: (value: [number, number, number]) => {\r\n                                setScale(value);\r\n                            },\r\n                            lock: true\r\n                        }\r\n                    },\r\n                    geometry: {\r\n                        args: {\r\n                            value: args,\r\n                            onChange: (value: any) => {\r\n                                setArgs(value);\r\n                            }\r\n                        }\r\n                    },\r\n                    material: {\r\n                        color: {\r\n                            label: 'color',\r\n                            value: color,\r\n                            onChange: (value: string) => {\r\n                                setColor(value);\r\n                            }\r\n                        },\r\n                        wireframe: {\r\n                            label: 'Wireframe',\r\n                            value: wireframe,\r\n                            onChange: (value: boolean) => {\r\n                                setWireframe(value);\r\n                            }\r\n                        },\r\n                        reflectivity: {\r\n                            label: 'Reflectivity',\r\n                            value: reflectivity,\r\n                            onChange: (value: number) => {\r\n                                setReflectivity(value);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }}>\r\n\r\n                {renderGeometry()}\r\n                <meshPhysicalMaterial color={color} wireframe={wireframe} reflectivity={reflectivity} side={DoubleSide}></meshPhysicalMaterial>\r\n            </mesh>\r\n            {config.decals.map(renderDecal)}\r\n        </>\r\n\r\n    )\r\n}\r\nexport default  BlockLoader;\r\n","import React, {useState} from \"react\";\r\nimport {GroupConfig} from \"../models/GroupConfig\";\r\nimport {useBox, usePlane} from \"@react-three/cannon\";\r\nimport BlockLoader from \"./BlockLoader\";\r\nimport {Html} from \"@react-three/drei\";\r\n\r\nconst GroupLoader = (config: GroupConfig, index: number) => {\r\n    const [position, setPosition] = useState(config.transform.position);\r\n    const [rotation, setRotation] = useState(config.transform.rotation);\r\n    const [scale, setScale] = useState(config.transform.scale);\r\n\r\n    const [castShadow, setCastShadow] = useState(config.castShadow);\r\n    const [receiveShadow, setReceiveShadow] = useState(config.receiveShadow);\r\n\r\n    const [enabled, setEnabled] = useState<boolean>(config.physics.enabled);\r\n    const [mass, setMass] = useState<number>(config.physics?.mass || 0);\r\n\r\n    const [hovered, setHover] = useState(false);\r\n\r\n    const [ref, api] = useBox(() => ({ mass, position}));\r\n    return <group ref={ref} key={index} name={config.name} castShadow={castShadow} receiveShadow={receiveShadow} scale={scale} userData={{\r\n        controls: {\r\n            transform: {\r\n                position: {\r\n                    label: 'Position',\r\n                    value: position,\r\n                    onChange: (value: [number, number, number]) => {\r\n                        setPosition(value);\r\n                    }\r\n                },\r\n                rotation: {\r\n                    label: 'Rotation',\r\n                    value: rotation,\r\n                    onChange: (value: [number, number, number]) => {\r\n                        setRotation(value);\r\n                    }\r\n                },\r\n                scale: {\r\n                    label: 'Scale',\r\n                    value: scale,\r\n                    onChange: (value: [number, number, number]) => {\r\n                        setScale(value);\r\n                    },\r\n                    lock: true\r\n                }\r\n            },\r\n            physics: {\r\n                enabled: {\r\n                    label: 'Enabled',\r\n                    value: enabled,\r\n                    onChange: (value: boolean) => {\r\n                        setEnabled(value);\r\n                    }\r\n                },\r\n                mass: {\r\n                    label: 'Mass',\r\n                    value: mass,\r\n                    onChange: (value: number) => {\r\n                        setMass(value);\r\n                    },\r\n                    render: (get: any) => get('enabled')\r\n                }\r\n            }\r\n        }\r\n    }}\r\n        onPointerOver={() => setHover(true)}\r\n        onPointerOut={() => setHover(false)}\r\n    >\r\n    {config.objects.map((object, index) => <BlockLoader key={index} {...object}/>)}\r\n        <Html distanceFactor={10} style={{ pointerEvents: \"none\", display: hovered ? \"block\" : \"none\" }}>\r\n            <div className=\"content\">{config.name}</div>\r\n        </Html>\r\n    </group>;\r\n}\r\nexport default GroupLoader;\r\n","import {OrbitControls, useGLTF, useTexture} from \"@react-three/drei\";\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport {button, buttonGroup, folder, LevaInputs, useControls} from \"leva\";\r\nimport {useLoader, useThree} from \"@react-three/fiber\";\r\nimport Dodecahedron from \"../shapes/Dodecahedron\";\r\nimport * as THREE from 'three';\r\nimport {MyTransformControls} from \"./MyTransformControls\";\r\nimport {CubeTextureLoader, Object3D, TextureLoader, Vector2, Vector3} from \"three\";\r\nimport {DimensionsIcon} from \"@radix-ui/react-icons\";\r\nimport { Environment } from '@react-three/drei'\r\nimport {HDRCubeTextureLoader} from \"three/examples/jsm/loaders/HDRCubeTextureLoader\";\r\nimport {BlockConfig} from \"../models/BlockConfig\";\r\nimport {useObjectStore} from \"../App\";\r\nimport {ModelConfig} from \"../models/ModelConfig\";\r\nimport ModelLoader from \"../loader/ModelLoader\";\r\nimport {GroupConfig} from \"../models/GroupConfig\";\r\nimport GroupLoader from \"../loader/GroupLoader\";\r\nimport {useBox, usePlane} from \"@react-three/cannon\";\r\n\r\nfunction Plane(props: any) {\r\n    const [ref] = usePlane(() => ({ rotation: [-Math.PI / 2, 0, 0], ...props }))\r\n    return (\r\n        <mesh ref={ref}>\r\n            <planeBufferGeometry args={[100, 100]} />\r\n        </mesh>\r\n    )\r\n}\r\n\r\nfunction Cube(props: any) {\r\n    const [ref] = useBox(() => ({ mass: 1, position: [0, 5, 0], ...props }))\r\n    return (\r\n        <group ref={ref}>\r\n            <mesh position={[5, 0, 5]}>\r\n                <boxBufferGeometry />\r\n                <meshPhysicalMaterial color={\"#AA874D\"}></meshPhysicalMaterial>\r\n            </mesh>\r\n        </group>\r\n\r\n    )\r\n}\r\nconst TransformControlsLock = () => {\r\n\r\n    const { raycaster, mouse, camera, scene, gl } = useThree();\r\n    const reduce = (objects: Object3D[], into: Object): {  } => {\r\n        return objects.reduce((obj, child, i) => {\r\n                const schema = {\r\n                    // [`${child.type}_${child.name}`]: button(() => alert(child.id))\r\n                    [`${child.type}_${child.uuid}_uuid`]: {\r\n                        label: 'id',\r\n                        value: child.uuid,\r\n                        type: LevaInputs.STRING\r\n                    }\r\n                };\r\n                if(child.name){\r\n                    schema[`${child.type}_${child.name}_name`]= {\r\n                        label: 'name',\r\n                        value: child.name,\r\n                        type: LevaInputs.STRING\r\n                    }\r\n                }\r\n                const s = {[`Select_${child.uuid.substr(0, 4)}`]: button(() => setSelectedObject(scene.getObjectById(child.id)))}\r\n                // console.log(child);\r\n                reduce(child.children, {s});\r\n                const p = {\r\n                    [`${child.type}_${child.uuid.substr(0, 4)}`]: folder(s, {collapsed: true})\r\n                }\r\n\r\n                return Object.assign(obj, p);\r\n            },\r\n            into);\r\n    }\r\n    const sc = {'Scene': {\r\n            label: 'uuid',\r\n            value: scene.id,\r\n            type: LevaInputs.STRING\r\n        }};\r\n    reduce(scene.children, sc);\r\n    useControls('Scene', sc, [scene, scene.children]);\r\n\r\n    // @ts-ignore\r\n    const [{mode}, setMode] = useControls('Transform', () => ({\r\n        mode: {\r\n            label: 'Mode',\r\n            value: 'translate',\r\n            options: {\r\n                scale: 'scale',\r\n                rotate: 'rotate',\r\n                translate: 'translate'\r\n            },\r\n            // render: (get) => selectedObject != null\r\n        },\r\n        'Preset': buttonGroup({\r\n            label: <DimensionsIcon/>,\r\n            opts: {\r\n            'Translate': () => setMode({ mode: 'translate' }),\r\n            'Rotate': () => setMode({ mode: 'rotate' }),\r\n            'Scale': () => setMode({ mode: 'scale' }),\r\n        }})\r\n    }));\r\n\r\n    const [selectedObject, setSelectedObject] = useState<THREE.Object3D>();\r\n\r\n    const orbitControls = useRef<any>(null!);\r\n    const transformControls =  useRef<any>(null!);\r\n\r\n    useEffect(() => {\r\n        if(transformControls.current && orbitControls.current) {\r\n            const {current: controls} = transformControls;\r\n            const callback = (event: any) => {\r\n                orbitControls.current.enabled = !event.value;\r\n                if (mode === \"translate\" && !event.value) {\r\n                    // setTransform({position: (transformControls.current?.object as THREE.Object3D).position.toArray()});\r\n                }\r\n                if (mode === \"rotate\" && !event.value) {\r\n                    const orientation = (transformControls.current?.object as THREE.Object3D).rotation;\r\n                    // setTransform({rotation: [orientation.x, orientation.y, orientation.z]});\r\n                }\r\n                if (mode === \"scale\" && !event.value) {\r\n                    // setTransform({scale: (transformControls.current?.object as THREE.Object3D).scale.toArray()});\r\n                }\r\n            }\r\n            controls.addEventListener('dragging-changed', callback)\r\n            return () => controls.removeEventListener('dragging-changed', callback)\r\n        }\r\n    })\r\n\r\n    const objectProps = selectedObject?.userData.controls || {};\r\n    const [, setObjectProps] = useControls('Mesh', () => (objectProps) , [selectedObject]);\r\n\r\n    const transform = selectedObject?.userData.controls?.transform || {\r\n        position: [0, 0, 0],\r\n        rotation : [0, 0, 0],\r\n        scale: [1, 1, 1]};\r\n    const [, setTransform] = useControls('Transform', () => (transform), [selectedObject]);\r\n\r\n    const [args, setArgs] = useState<any[]>([])\r\n    const inputs = args\r\n        .reduce((control, _, i) =>{\r\n            return Object.assign(control, { [`Point_${i}`]: {\r\n                label: `Point_${i}`,\r\n                value:_,\r\n                onChange: (value: number) => {\r\n                    // args[i] = value as any;\r\n                    // selectedObject?.userData.controls.geometry.args.onChange(args);\r\n                    console.log(value);\r\n                }\r\n            } })\r\n        }, {})\r\n    const values = useControls('Geometry', inputs, [args])\r\n\r\n    const geometry = selectedObject?.userData.controls?.geometry || {};\r\n    const [, setGeometry] = useControls('Geometry', () => (geometry), [selectedObject]);\r\n\r\n    const material = selectedObject?.userData.controls?.material || {};\r\n    const [, setMaterial] = useControls('Material', () => (material), [selectedObject]);\r\n\r\n    const physics = selectedObject?.userData.controls?.physics || {};\r\n    const [, setPhysics] = useControls('Physics', () => (physics), [selectedObject]);\r\n\r\n    // const { y } = useControls({\r\n    //     i: 100,\r\n    //     y: plot({ expression: 'cos(x)' })\r\n    // }, {})\r\n    // useControls('Labels', {\r\n    //     label: {\r\n    //         image: ''\r\n    //     },\r\n    //     Apply: button(() => alert('click'))\r\n    // });\r\n\r\n\r\n    useEffect(() => {\r\n        if(selectedObject){\r\n            const orientation = selectedObject.rotation;\r\n            setTransform({position: selectedObject.position.toArray()});\r\n            setTransform({rotation: [orientation.x, orientation.y, orientation.z]});\r\n            setTransform({scale: selectedObject.scale.toArray()});\r\n\r\n            if(selectedObject.userData.controls){\r\n                setObjectProps({castShadow: selectedObject.userData.controls.castShadow?.value});\r\n                // setArgs({args: selectedObject.userData.controls.geometry.args.value});\r\n\r\n                setGeometry({args: selectedObject.userData.controls.geometry.args.value});\r\n                setMaterial({ color: selectedObject.userData.controls.material.color.value});\r\n                setMaterial({ wireframe: selectedObject.userData.controls.material.wireframe.value});\r\n                // setPhysics({enabled: selectedObject.userData.controls.physics?.enabled?.value});\r\n                // setPhysics({mass: selectedObject.userData.controls.physics.mass.value});\r\n\r\n            }else{\r\n\r\n            }\r\n        } else {\r\n            // setMaterialControls([]);\r\n        }\r\n    },[selectedObject]);\r\n\r\n\r\n\r\n    const objects: BlockConfig[] = useObjectStore((state: any) => state.objects);\r\n    const models: ModelConfig[] = useObjectStore((state: any) => state.models);\r\n    const groups: GroupConfig[] = useObjectStore((state: any) => state.groups);\r\n\r\n    const onPointerDown = (event: PointerEvent) => {\r\n        mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\r\n        mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;\r\n\r\n        raycaster.setFromCamera(mouse, camera);\r\n        const intersects = raycaster.intersectObjects(scene.children).filter(intersect => intersect.object.type === 'Group');\r\n        // .sort((a, b) => a.distance < b.distance ? 1: -1);\r\n        if (intersects.length) {\r\n            const object = intersects[0].object;\r\n            if(object.userData){\r\n                setSelectedObject(object);\r\n            }\r\n        }\r\n\r\n    }\r\n    document.addEventListener( 'pointerdown', onPointerDown );\r\n\r\n\r\n    return (\r\n        <>\r\n            {selectedObject && <MyTransformControls\r\n                ref={transformControls}\r\n                enabled={true}\r\n                position={selectedObject.position}\r\n                rotation={selectedObject.rotation}\r\n                scale={selectedObject.scale}\r\n                mode={mode}\r\n                camera={camera}\r\n                showX={true}\r\n                showY={true}\r\n                showZ={true}\r\n                size={1}\r\n                space={\"local\"}\r\n                axis={null}\r\n                translationSnap={null}\r\n                rotationSnap={null}\r\n                scaleSnap={null}\r\n                dragging\r\n                castShadow receiveShadow\r\n                object={selectedObject}\r\n            >\r\n            </MyTransformControls>\r\n            }\r\n            <OrbitControls\r\n                ref={orbitControls}\r\n                // enableDamping={true}\r\n                // dampingFactor={0.25}\r\n                // rotateSpeed={0.4}\r\n                // keyPanSpeed={0.4}\r\n                // screenSpacePanning={true}\r\n                // zoomSpeed={0.6}\r\n                // enablePan={true}\r\n                // panSpeed={0.4}\r\n                // minPolarAngle={Math.PI / 4}\r\n                // maxPolarAngle={Math.PI / 2}\r\n                // minDistance={-500}\r\n                // maxDistance={1000}\r\n            />\r\n            {/*{models.map((model, index) => <ModelLoader key={index}  {...model}></ModelLoader>)}*/}\r\n            <Environment preset=\"sunset\" background/>\r\n            {/*{objects.map((object, index) => <ObjectLoader key={index} {...object}></ObjectLoader>)}*/}\r\n            <Plane></Plane>\r\n            {groups.filter(group=> group.disabled !== true).map((group, index) => <GroupLoader key={index} {...group}></GroupLoader>)}\r\n\r\n        </>\r\n\r\n        )\r\n}\r\nexport default TransformControlsLock;\r\n","import {Physics, useBox, usePlane} from \"@react-three/cannon\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {button, buttonGroup, folder, LevaInputs, useControls} from \"leva\";\r\nimport niceColors from 'nice-color-palettes'\r\nimport {useThree} from \"@react-three/fiber\";\r\nimport TransformControlsLock from \"../three-extension/TransformControlsLock\";\r\nimport {ACESFilmicToneMapping, Object3D, PerspectiveCamera, Vector3} from \"three\";\r\nimport {DimensionsIcon, InputIcon} from \"@radix-ui/react-icons\";\r\n//@ts-ignore\r\nimport { RayTracingRenderer } from 'ray-tracing-renderer'\r\nimport {useTransform} from \"leva/plugin\";\r\nimport {SceneConfig} from \"../models/SceneConfig\";\r\n\r\n\r\nconst SceneLoader = (config: SceneConfig) => {\r\n    const { raycaster, mouse, camera, scene, gl } = useThree();\r\n\r\n\r\n    useTransform();\r\n\r\n    const canvasRef = React.useRef() as React.MutableRefObject<HTMLCanvasElement>;\r\n    const hoverinc = new RayTracingRenderer({\r\n        canvas: document.getElementById(\"canvas-hoverinc\"),\r\n        antialias: true,\r\n        alpha: true,\r\n    });\r\n    hoverinc.setSize(window.innerWidth, window.innerHeight);\r\n\r\n    const tick = () => {\r\n\r\n        hoverinc.render(scene, camera);\r\n        requestAnimationFrame(tick);\r\n    }\r\n\r\n\r\n    // @ts-ignore\r\n    const [{renderer}, setRenderer] = useControls('Renderer', () => ({\r\n        renderer: {\r\n            label: 'Provider',\r\n            value: 'webgl',\r\n            options: {\r\n                webgl: 'webgl',\r\n                hoverinc: 'hoverinc',\r\n                erichlof: 'erichlof'\r\n            },\r\n            onChange(value: string) {\r\n                if(value === 'hoverinc'){\r\n                    // @ts-ignore\r\n                    document.getElementById(\"canvas-hoverinc\").style.display = 'block';\r\n                    // @ts-ignore\r\n                    document.getElementById(\"canvas-webgl\").style.display = 'none';\r\n                    hoverinc.gammaOutput = true;\r\n                    hoverinc.gammaFactor = 2.2;\r\n                    hoverinc.setPixelRatio(1.0);\r\n                    hoverinc.toneMapping = ACESFilmicToneMapping;\r\n                    hoverinc.toneMappingExposure = 1.5;\r\n                    hoverinc.renderWhenOffFocus = false;\r\n                    hoverinc.bounces = 3;\r\n                    tick();\r\n                }\r\n                if(value == 'webgl') {\r\n                    // @ts-ignore\r\n                    document.getElementById(\"canvas-hoverinc\").style.display = 'none';\r\n                    // @ts-ignore\r\n                    document.getElementById(\"canvas-webgl\").style.display = 'block';\r\n                }\r\n            }\r\n            // render: (get) => selectedObject != null\r\n        },\r\n        'Preset': buttonGroup({\r\n            label: <InputIcon/>,\r\n            opts: {\r\n                'webgl': () => setRenderer({ renderer: 'webgl' }),\r\n                'hoverinc': () => setRenderer({ renderer: 'hoverinc' }),\r\n                'erichlof': () => setRenderer({ renderer: 'erichlof' }),\r\n            }})\r\n    }));\r\n\r\n    const [, setCamera] = useControls('Camera', () => ({\r\n        position: {\r\n            label: 'Position',\r\n            value: [camera.position.x, camera.position.y, camera.position.z],\r\n            step: 5,\r\n            onChange: (value: [number, number, number]) => {\r\n                camera.position.setX(value[0]);\r\n                camera.position.setY(value[1]);\r\n                camera.position.setZ(value[2]);\r\n            }\r\n        },\r\n        rotation: {\r\n            label: 'Rotation',\r\n            value: [camera.rotation.x, camera.rotation.y, camera.rotation.z],\r\n            onChange: (value: [number, number, number]) => {\r\n                camera.rotation.set(value[0], value[1], value[2]);\r\n            }\r\n        },\r\n        fov: {\r\n            label: 'FOV',\r\n            value: (camera as PerspectiveCamera).fov,\r\n            onChange: (value: number) => {\r\n                (camera as PerspectiveCamera).fov = value;\r\n            }\r\n        }\r\n    }));\r\n    function Plane(props: any) {\r\n        const [ref] = usePlane(() => ({ rotation: [-Math.PI / 2, 0, 0], ...props }))\r\n        return (\r\n            <mesh ref={ref}>\r\n                <planeBufferGeometry args={[100, 100]} />\r\n            </mesh>\r\n        )\r\n    }\r\n\r\n    function Cube(props: any) {\r\n        const [ref] = useBox(() => ({ mass: 1, position: [0, 5, 0], ...props }))\r\n        return (\r\n            <mesh ref={ref}>\r\n                <boxBufferGeometry />\r\n            </mesh>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Physics>\r\n            <TransformControlsLock></TransformControlsLock>\r\n        </Physics>\r\n\r\n    )\r\n}\r\nexport default SceneLoader;\r\n","import React, {Suspense, useState} from \"react\";\r\nimport {SceneConfig} from \"../models/SceneConfig\";\r\nimport {Canvas} from \"@react-three/fiber\";\r\nimport * as THREE from \"three\";\r\nimport {LightConfig} from \"../models/LightConfig\";\r\nimport Fallback from \"../Fallback\";\r\nimport SceneLoader from \"../loader/SceneLoader\";\r\n\r\n\r\nconst SceneEditor = (config: SceneConfig, index: number) => {\r\n    const [selectedObject, setSelectedObject] = useState<THREE.Object3D>();\r\n\r\n    const renderLight = (config: LightConfig, index: number) => {\r\n        if(config.type === \"Hemisphere\"){\r\n            return <hemisphereLight args={[0xffffff, 0x444444]} position={config.position} />\r\n        }\r\n        if(config.type === \"Directional\") {\r\n            return <directionalLight args={[0xffffff]} position={config.position} />\r\n        }\r\n        return <pointLight args={[config.color, 1, 100]} key={index} position={config.position}/>;\r\n    }\r\n    return (\r\n        <>\r\n            <canvas id=\"canvas-hoverinc\" style={{width: 500, height: 500, background: \"white\", display: \"none\"}}></canvas>\r\n            <Canvas id={\"canvas-webgl\"} style={config.canvas}\r\n                    camera={config.camera}\r\n                    gl={config.gl}\r\n                // raycaster={{ filter: (intersects, state) => intersects.reverse()}}\r\n            >\r\n\r\n                <axesHelper args={[20]}/>\r\n                {config.lights.map(renderLight)}\r\n                <Suspense fallback={<Fallback />}>\r\n                    <SceneLoader {...config}/>\r\n                </Suspense>\r\n                {/*<EffectComposer>*/}\r\n                {/*    <SelectiveBloom luminanceThreshold={0} luminanceSmoothing={0.9} height={300} />*/}\r\n                {/*</EffectComposer>*/}\r\n            </Canvas>\r\n        </>\r\n\r\n    );\r\n}\r\nexport default SceneEditor;\r\n","import React, {Suspense, useEffect, useRef, useState} from \"react\"\r\nimport './App.css';\r\nimport sceneConfig from \"./scenes/model.json\";\r\nimport {SceneConfig} from \"./models/SceneConfig\";\r\nimport create from \"zustand\";\r\nimport {BlockConfig} from \"./models/BlockConfig\";\r\nimport {combineAndImmer} from \"./store/ObjectStore\";\r\nimport SceneEditor from \"./editor/SceneEditor\";\r\n\r\nconst config: SceneConfig = sceneConfig as any;\r\nexport const useObjectStore = create(\r\n    combineAndImmer({objects: config.objects, models: config.models, groups: config.groups}, (set) => ({\r\n        updateObject: (object: BlockConfig, index: number) =>\r\n            set((state) => {\r\n                // state.objects[index] = object;\r\n            }),\r\n        addObject: (object: BlockConfig) =>\r\n            set((state) => {\r\n                // state.objects.push(object);\r\n            })\r\n    }))\r\n);\r\n\r\nfunction App() {\r\n    return (\r\n        <SceneEditor {...config}></SceneEditor>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import create, {\r\n    State,\r\n    SetState,\r\n    GetState,\r\n    StoreApi\r\n    // StateCreator\r\n} from \"zustand\";\r\nimport produce from \"immer\";\r\nimport {BlockConfig} from \"../models/BlockConfig\";\r\n\r\ntype StateCreator<\r\n    T extends State,\r\n    CustomSetState = SetState<T>,\r\n    U extends State = T\r\n    > = (set: CustomSetState, get: GetState<T>, api: StoreApi<T>) => U;\r\n\r\n// @ts-ignore\r\nconst immer = <T extends State, U extends State>(config: StateCreator<T, (fn: (draft: T) => void) => void, U>): StateCreator<T, SetState<T>, U> => (set, get, api) => config((fn) => set(produce(fn) as (state: T) => T), get, api);\r\n\r\nconst combine = <PrimaryState extends State, SecondaryState extends State>(\r\n    initialState: PrimaryState,\r\n    create: (\r\n        set: SetState<PrimaryState & SecondaryState>,\r\n        get: GetState<PrimaryState & SecondaryState>,\r\n        api: StoreApi<PrimaryState & SecondaryState>\r\n    ) => SecondaryState\r\n): StateCreator<PrimaryState & SecondaryState> => (set, get, api) =>\r\n    Object.assign(\r\n        {},\r\n        initialState,\r\n        create(\r\n            set as SetState<PrimaryState & SecondaryState>,\r\n            get as GetState<PrimaryState & SecondaryState>,\r\n            api as StoreApi<PrimaryState & SecondaryState>\r\n        )\r\n    );\r\n\r\nexport const combineAndImmer = <\r\n    PrimaryState extends State,\r\n    SecondaryState extends State\r\n    >(\r\n    initialState: PrimaryState,\r\n    config: StateCreator<\r\n        PrimaryState & SecondaryState,\r\n        (fn: (draft: PrimaryState) => void) => void,\r\n        SecondaryState\r\n        >\r\n): StateCreator<PrimaryState & SecondaryState> => {\r\n    return combine(initialState, immer(config));\r\n};\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}