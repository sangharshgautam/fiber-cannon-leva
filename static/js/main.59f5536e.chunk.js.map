{"version":3,"sources":["shapes/Cube.tsx","store/ObjectStore.tsx","three-extension/MyTransformControls.tsx","shapes/NPoint.tsx","shapes/Plane.tsx","three-extension/TransformControlsLock.tsx","scene/BasicScene.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Cube","initialState","objects","uuid","uuidv4","type","castShadow","transform","position","rotation","Math","PI","scale","geometry","args","material","color","r","g","b","wireframe","reflectivity","roughness","physics","enabled","mass","decals","Array","useObjectStore","create","config","set","get","api","Object","assign","combine","fn","produce","immer","combineAndImmer","updateObject","object","index","state","addObject","MyTransformControls","React","ref","props","camera","rest","transformProps","pick","gl","useThree","defaultCamera","invalidate","explCamera","TransformControlsImpl","domElement","controls","attach","addEventListener","removeEventListener","dispose","undefined","NPoint","Plane","Model","model","raycaster","mouse","scene","useLoader","TextureLoader","GLTFLoader","traverse","child","THREE","receiveShadow","name","transparent","TransformControlsLock","sc","label","value","id","LevaInputs","STRING","reduce","into","obj","i","schema","s","substr","button","setSelectedObject","getObjectById","children","p","folder","collapsed","useControls","mode","options","rotate","translate","buttonGroup","opts","setMode","useState","selectedObject","orbitControls","useRef","transformControls","useEffect","current","callback","event","userData","setObject","onChange","setTransform","inputs","control","_","console","log","setMaterial","setPhysics","orientation","toArray","x","y","z","document","clientX","window","innerWidth","clientY","innerHeight","setFromCamera","intersects","intersectObjects","filter","intersect","length","showX","showY","showZ","size","space","axis","translationSnap","rotationSnap","scaleSnap","dragging","OrbitControls","BasicScene","useTransform","hoverinc","RayTracingRenderer","canvas","getElementById","antialias","alpha","setSize","tick","render","requestAnimationFrame","renderer","webgl","erichlof","style","display","gammaOutput","gammaFactor","setPixelRatio","toneMapping","ACESFilmicToneMapping","toneMappingExposure","renderWhenOffFocus","bounces","setRenderer","Fallback","Html","className","App","width","height","background","fov","Color","fallback","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.59f5536e.chunk.js","sourcesContent":["import {useBox} from \"@react-three/cannon\";\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport {useControls} from \"leva\";\r\nimport * as THREE from 'three';\r\nimport {Html} from \"@react-three/drei\";\r\nimport {Color, Mesh} from \"three\";\r\nimport {ObjectData} from \"../store/ObjectStore\";\r\nimport MyDecal from \"../three-extension/MyDecal\";\r\nimport DecalData from \"../store/DecalData\";\r\n\r\n// @ts-ignore\r\nfunction Cube(objectData: ObjectData) {\r\n    const [args, setArgs] = useState<[]>(objectData.geometry.args);\r\n\r\n    const [position, setPosition] = useState(objectData.transform.position);\r\n    const [rotation, setRotation] = useState(objectData.transform.rotation);\r\n    const [scale, setScale] = useState(objectData.transform.scale);\r\n\r\n    const [castShadow, setCastShadow] = useState(objectData.castShadow);\r\n\r\n    const [color, setColor] = useState(objectData.material.color);\r\n    const [wireframe, setWireframe] = useState(objectData.material.wireframe);\r\n    const[reflectivity, setReflectivity] = useState(objectData.material.reflectivity);\r\n\r\n    const [physicsEnabled, setPhysicsEnabled] = useState(objectData.physics.enabled);\r\n    const [mass, setMass] = useState(objectData.physics.mass);\r\n\r\n    const [ref, api] = useBox(() => ({ args, mass, position, rotation, scale }));\r\n    const [hovered, setHover] = useState(false)\r\n\r\n    const mesh = useRef<Mesh>(null!)\r\n    // useEffect(() => {\r\n    //     api.position.set(position[0], position[1], position[2]);\r\n    //     api.rotation.set(rotation[0], rotation[1], rotation[2]);\r\n    //     api.mass?.set(mass);\r\n    // }, [position, rotation, mass]);\r\n    const renderDecal = (decalData: DecalData, index: number) => {\r\n        if(mesh.current){\r\n            return <MyDecal key={index} mesh={mesh.current} decalData={decalData}/>\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <mesh ref={mesh} name={\"Cube\"} castShadow={castShadow} position={position} rotation={rotation} scale={scale} userData={{\r\n                controls: {\r\n                    castShadow: {\r\n                        label: 'Cast Shadow',\r\n                        value: castShadow,\r\n                        onChange: (value: boolean) => {\r\n                            setCastShadow(value);\r\n                        }\r\n                    },\r\n                    transform: {\r\n                        position: {\r\n                            label: 'Position',\r\n                            value: position,\r\n                            onChange: (value: [number, number, number]) => {\r\n                                setPosition(value);\r\n                            }\r\n                        },\r\n                        rotation: {\r\n                            label: 'Rotation',\r\n                            value: rotation,\r\n                            onChange: (value: [number, number, number]) => {\r\n                                setRotation(value);\r\n                            }\r\n                        },\r\n                        scale: {\r\n                            label: 'Scale',\r\n                            value: scale,\r\n                            onChange: (value: [number, number, number]) => {\r\n                                setScale(value);\r\n                            },\r\n                            lock: true\r\n                        }\r\n                    },\r\n                    geometry: {\r\n                        args: {\r\n                            label: 'Dimension',\r\n                            value: args,\r\n                            min: 0.1,\r\n                            step: 0.2,\r\n                            onChange: (value: any) => {\r\n                                setArgs(value);\r\n                            }\r\n                        }\r\n                    },\r\n                    material: {\r\n                        color: {\r\n                            label: 'color',\r\n                            value: color,\r\n                            onChange: (value: string) => {\r\n                                setColor(value);\r\n                            }\r\n                        },\r\n                        wireframe: {\r\n                            label: 'Wireframe',\r\n                            value: wireframe,\r\n                            onChange: (value: boolean) => {\r\n                                setWireframe(value);\r\n                            }\r\n                        },\r\n                        reflectivity: {\r\n                            label: 'Reflectivity',\r\n                            value: reflectivity,\r\n                            onChange: (value: number) => {\r\n                                setReflectivity(value);\r\n                            }\r\n                        }\r\n                    },\r\n                    physics: {\r\n                        enabled: {\r\n                            label: 'Enabled',\r\n                            value: physicsEnabled,\r\n                            onChange: (value: boolean) => {\r\n                                setPhysicsEnabled(value);\r\n                            }\r\n                        },\r\n                        mass: {\r\n                            label: 'Mass',\r\n                            value: mass,\r\n                            onChange: (value: number) => {\r\n                                setMass(value);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }}\r\n                  // onPointerOver={() => setHover(true)}\r\n                  // onPointerOut={() => setHover(false)}\r\n            >\r\n                <boxBufferGeometry args={args}/>\r\n                <meshPhysicalMaterial color={color} wireframe={wireframe} reflectivity={reflectivity}></meshPhysicalMaterial>\r\n                {/*<Html distanceFactor={10} style={{ pointerEvents: \"none\", display: hovered ? \"block\" : \"none\" }}>*/}\r\n                {/*    <div className=\"content\">*/}\r\n                {/*        Mass: {mass}*/}\r\n                {/*    </div>*/}\r\n                {/*</Html>*/}\r\n\r\n            </mesh>\r\n            {objectData.decals.map(renderDecal)}\r\n        </>\r\n\r\n    )\r\n}\r\nexport default  Cube;\r\n","import create, {\r\n    State,\r\n    SetState,\r\n    GetState,\r\n    StoreApi\r\n    // StateCreator\r\n} from \"zustand\";\r\nimport {v4 as uuidv4} from 'uuid';\r\nimport produce from \"immer\";\r\nimport DecalData from \"./DecalData\";\r\n\r\nexport interface ScenaData extends State {\r\n    objects: ObjectData[]\r\n}\r\nexport interface ObjectData extends State {\r\n    uuid: string;\r\n    type: 'Plane'| 'Cube' | 'NPoint';\r\n    castShadow: boolean;\r\n    transform: ObjectTransform;\r\n    geometry: ObjectGeometry;\r\n    material: ObjectMaterial;\r\n    physics: ObjectPhysics;\r\n    decals: DecalData[];\r\n}\r\nexport interface ObjectTransform {\r\n    position: [number, number, number];\r\n    rotation: [number, number, number];\r\n    scale: [number, number, number];\r\n}\r\n\r\nexport interface ObjectPhysics {\r\n    enabled: boolean;\r\n    mass: number\r\n}\r\n\r\nexport interface ObjectGeometry {\r\n    args: []\r\n}\r\nexport interface ObjectMaterial {\r\n    color: string;\r\n    wireframe: boolean;\r\n    reflectivity: number;\r\n    roughness?: number;\r\n}\r\ntype StateCreator<\r\n    T extends State,\r\n    CustomSetState = SetState<T>,\r\n    U extends State = T\r\n    > = (set: CustomSetState, get: GetState<T>, api: StoreApi<T>) => U;\r\n\r\n// @ts-ignore\r\nconst immer = <T extends State, U extends State>(config: StateCreator<T, (fn: (draft: T) => void) => void, U>): StateCreator<T, SetState<T>, U> => (set, get, api) => config((fn) => set(produce(fn) as (state: T) => T), get, api);\r\n\r\nconst combine = <PrimaryState extends State, SecondaryState extends State>(\r\n    initialState: PrimaryState,\r\n    create: (\r\n        set: SetState<PrimaryState & SecondaryState>,\r\n        get: GetState<PrimaryState & SecondaryState>,\r\n        api: StoreApi<PrimaryState & SecondaryState>\r\n    ) => SecondaryState\r\n): StateCreator<PrimaryState & SecondaryState> => (set, get, api) =>\r\n    Object.assign(\r\n        {},\r\n        initialState,\r\n        create(\r\n            set as SetState<PrimaryState & SecondaryState>,\r\n            get as GetState<PrimaryState & SecondaryState>,\r\n            api as StoreApi<PrimaryState & SecondaryState>\r\n        )\r\n    );\r\n\r\n\r\n\r\nconst combineAndImmer = <\r\n    PrimaryState extends State,\r\n    SecondaryState extends State\r\n    >(\r\n    initialState: PrimaryState,\r\n    config: StateCreator<\r\n        PrimaryState & SecondaryState,\r\n        (fn: (draft: PrimaryState) => void) => void,\r\n        SecondaryState\r\n        >\r\n): StateCreator<PrimaryState & SecondaryState> => {\r\n    return combine(initialState, immer(config));\r\n};\r\n\r\nconst initialState = {\r\n    objects: [{\r\n        uuid: uuidv4(),\r\n        type: 'Plane',\r\n        castShadow: true,\r\n        transform: {\r\n            position: [0, -10, 0],\r\n            rotation: [-Math.PI / 2, 0, 0],\r\n            scale: [2, 2, 2],\r\n        },\r\n        geometry: {\r\n            args: [ 10, 10]\r\n        },\r\n        material: {\r\n            color: {r: 0.9, g: 0.9, b: 0.9},\r\n            wireframe: false,\r\n            reflectivity: 0.5,\r\n            roughness: 1.0\r\n        },\r\n        physics: {\r\n            enabled: true,\r\n            mass: 0\r\n        },\r\n        decals: new Array<DecalData>()\r\n    },\r\n    {\r\n        uuid: uuidv4(),\r\n        type: 'Cube',\r\n        castShadow: true,\r\n        transform: {\r\n            position: [0, 0, 0],\r\n            rotation: [0, Math.PI * 0.1, 0],\r\n            scale: [1, 1, 7],\r\n        },\r\n        geometry: {\r\n            args: [ 1, 1, 1]\r\n        },\r\n        material: {\r\n            color: [0.95, 0.95, 0.95],\r\n            wireframe: false,\r\n            reflectivity: 0.5,\r\n            roughness: 1.0\r\n        },\r\n        physics: {\r\n            enabled: false,\r\n            mass: 1\r\n        },\r\n        decals: new Array<DecalData>()\r\n    },\r\n    {\r\n        uuid: uuidv4(),\r\n        type: 'Cube',\r\n        castShadow: false,\r\n        transform: {\r\n            position: [4.32, -0.68, 5.46],\r\n            rotation: [0, 0, 0],\r\n            scale: [1, 1, 1],\r\n        },\r\n        geometry: {\r\n            args: [ 2, 2, 2]\r\n        },\r\n        material: {\r\n            color: '#4316ba',\r\n            wireframe: false,\r\n            reflectivity: 1.0,\r\n            roughness: 1.0\r\n        },\r\n        physics: {\r\n            enabled: true,\r\n            mass: 2\r\n        },\r\n        decals: [{\r\n            uuid: uuidv4(),\r\n            transform: {\r\n                position: [4.32, -0.68, 5.46],\r\n                rotation: [0, 0, 0],\r\n                scale: [5, 5, 5],\r\n            },\r\n            material: {\r\n                color: '#4316ba',\r\n                wireframe: false,\r\n                reflectivity: 0.5,\r\n                roughness: 1.0\r\n            },\r\n        }]\r\n    },\r\n    // {\r\n    //     uuid: uuidv4(),\r\n    //     type: 'NPoint',\r\n    //     castShadow: false,\r\n    //     transform: {\r\n    //         position: [1, 1, 1],\r\n    //         rotation: [0, 0, 0],\r\n    //         scale: [0.2, 0.2, 0.2],\r\n    //     },\r\n    //     geometry: {\r\n    //         args: [\r\n    //             {x: 5, y: -10},\r\n    //             {x: 6.986693307950612, y: -8},\r\n    //             {x: 8.894183423086506, y: -6},\r\n    //             {x: 10.646424733950354, y: -4},\r\n    //             {x: 12.173560908995228, y: -2},\r\n    //             {x: 13.414709848078965, y: 0},\r\n    //             {x: 14.320390859672264, y: 2},\r\n    //             {x: 14.854497299884603, y: 4},\r\n    //             {x: 14.99573603041505, y: 6},\r\n    //             {x: 14.738476308781951, y: 8}\r\n    //         ]\r\n    //     },\r\n    //     material: {\r\n    //         color: '#4316ba',\r\n    //         wireframe: false,\r\n    //         reflectivity: 1.0\r\n    //     },\r\n    //     physics: {\r\n    //         mass: 2\r\n    //     },\r\n    //     decals: []\r\n    // }\r\n    ]\r\n};\r\nexport const useObjectStore = create(\r\n    combineAndImmer(initialState, (set) => ({\r\n        updateObject: (object: ObjectData, index: number) =>\r\n            set((state) => {\r\n                // state.objects[index] = object;\r\n            }),\r\n        addObject: (object: ObjectData) =>\r\n            set((state) => {\r\n                // state.objects.push(object);\r\n            })\r\n    }))\r\n);\r\n","import * as React from 'react'\r\nimport { Object3D, Camera } from 'three'\r\nimport { useThree, ReactThreeFiber } from '@react-three/fiber'\r\nimport { TransformControls as TransformControlsImpl } from 'three-stdlib'\r\nimport pick from 'lodash.pick'\r\n\r\nexport type MyTransformControls = ReactThreeFiber.Object3DNode<TransformControlsImpl, typeof TransformControlsImpl>\r\n\r\ndeclare global {\r\n    namespace JSX {\r\n        interface IntrinsicElements {\r\n            transformControlsImpl: MyTransformControls\r\n        }\r\n    }\r\n}\r\n\r\ntype Props = MyTransformControls &\r\n    JSX.IntrinsicElements['group'] & {\r\n    enabled: boolean\r\n    axis: string | null\r\n    mode: string\r\n    translationSnap: number | null\r\n    rotationSnap: number | null\r\n    scaleSnap?: number | null\r\n    space: string\r\n    size: number\r\n    dragging: boolean\r\n    showX: boolean\r\n    showY: boolean\r\n    showZ: boolean\r\n    object: Object3D,\r\n    camera: Camera\r\n}\r\n\r\nexport const MyTransformControls = React.forwardRef<TransformControlsImpl, Props>(({ object, ...props }, ref) => {\r\n    const transformOnlyPropNames = [\r\n        'enabled',\r\n        'axis',\r\n        'mode',\r\n        'translationSnap',\r\n        'rotationSnap',\r\n        'scaleSnap',\r\n        'space',\r\n        'size',\r\n        'dragging',\r\n        'showX',\r\n        'showY',\r\n        'showZ',\r\n    ]\r\n\r\n    const { camera, ...rest } = props\r\n    const transformProps = pick(rest, transformOnlyPropNames)\r\n\r\n    const gl = useThree(({ gl }) => gl)\r\n    const defaultCamera = useThree(({ camera }) => camera)\r\n    const invalidate = useThree(({ invalidate }) => invalidate)\r\n\r\n    const explCamera = camera || defaultCamera\r\n\r\n    const [controls] = React.useState(() => new TransformControlsImpl(explCamera, gl.domElement))\r\n\r\n    React.useLayoutEffect(() => void controls?.attach(object as Object3D), [object, controls])\r\n\r\n    React.useEffect(() => {\r\n        controls?.addEventListener?.('change', invalidate)\r\n        return () => controls?.removeEventListener?.('change', invalidate)\r\n    }, [controls, invalidate])\r\n\r\n    return controls ? (\r\n        <>\r\n            <primitive ref={ref} dispose={undefined} object={controls} {...transformProps} />\r\n        </>\r\n    ) : null\r\n})\r\n","import {useBox} from \"@react-three/cannon\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {useControls} from \"leva\";\r\nimport * as THREE from 'three';\r\nimport {Html} from \"@react-three/drei\";\r\nimport {Color, Vector2} from \"three\";\r\nimport {ObjectData} from \"../store/ObjectStore\";\r\n\r\n// @ts-ignore\r\nfunction NPoint(objectData: ObjectData) {\r\n    const [args, setArgs] = useState<Vector2[]>(objectData.geometry.args as Vector2[]);\r\n\r\n    const [position, setPosition] = useState(objectData.transform.position);\r\n    const [rotation, setRotation] = useState(objectData.transform.rotation);\r\n    const [scale, setScale] = useState(objectData.transform.scale);\r\n\r\n    const [castShadow, setCastShadow] = useState(objectData.castShadow);\r\n\r\n    const [color, setColor] = useState(objectData.material.color);\r\n\r\n    const [wireframe, setWireframe] = useState(objectData.material.wireframe);\r\n\r\n    const[reflectivity, setReflectivity] = useState(objectData.material.reflectivity);\r\n\r\n    const [mass, setMass] = useState(objectData.physics.mass);\r\n\r\n    const [ref, api] = useBox(() => ({ mass, position, rotation, scale }));\r\n    const [hovered, setHover] = useState(false)\r\n\r\n\r\n    useEffect(() => {\r\n        api.position.set(position[0], position[1], position[2]);\r\n        api.position.set(rotation[0], rotation[1], rotation[2])\r\n        api.mass?.set(mass);\r\n    }, [position, rotation, mass]);\r\n    const [points, setPoints] = useState(args.map(arg => arg as Vector2));\r\n\r\n    return (\r\n        <mesh name={\"Cube\"} castShadow={castShadow} position={position} rotation={rotation} scale={scale} userData={{\r\n            controls: {\r\n                castShadow: {\r\n                    label: 'Cast Shadow',\r\n                    value: castShadow,\r\n                    onChange: (value: boolean) => {\r\n                        setCastShadow(value);\r\n                    }\r\n                },\r\n                transform: {\r\n                    position: {\r\n                        label: 'Position',\r\n                        value: position,\r\n                        onChange: (value: [number, number, number]) => {\r\n                            setPosition(value);\r\n                        }\r\n                    },\r\n                    rotation: {\r\n                        label: 'Rotation',\r\n                        value: rotation,\r\n                        onChange: (value: [number, number, number]) => {\r\n                            setRotation(value);\r\n                        }\r\n                    },\r\n                    scale: {\r\n                        label: 'Scale',\r\n                        value: scale,\r\n                        onChange: (value: [number, number, number]) => {\r\n                            setScale(value);\r\n                        }\r\n                    }\r\n                },\r\n                geometry: {\r\n                    args: {\r\n                        label: 'Dimension',\r\n                        value: args,\r\n                        min: 0.1,\r\n                        step: 0.2,\r\n                        onChange: (value: any) => {\r\n                            // setArgs(value);\r\n                        }\r\n                    }\r\n                },\r\n                material: {\r\n                    color: {\r\n                        label: 'color',\r\n                        value: color,\r\n                        onChange: (value: string) => {\r\n                            setColor(value);\r\n                        }\r\n                    },\r\n                    wireframe: {\r\n                        label: 'Wireframe',\r\n                        value: wireframe,\r\n                        onChange: (value: boolean) => {\r\n                            setWireframe(value);\r\n                        }\r\n                    },\r\n                    reflectivity: {\r\n                        label: 'Reflectivity',\r\n                        value: reflectivity,\r\n                        onChange: (value: number) => {\r\n                            setReflectivity(value);\r\n                        }\r\n                    }\r\n                },\r\n                physics: {\r\n                    mass: {\r\n                        label: 'Mass',\r\n                        value: mass,\r\n                        onChange: (value: number) => {\r\n                            setMass(value);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }}\r\n              onPointerOver={() => setHover(true)}\r\n              onPointerOut={() => setHover(false)}\r\n        >\r\n            <latheBufferGeometry args={[points]}/>\r\n            <meshPhysicalMaterial color={color} wireframe={wireframe} reflectivity={reflectivity}></meshPhysicalMaterial>\r\n            <Html distanceFactor={10} style={{ pointerEvents: \"none\", display: hovered ? \"block\" : \"none\" }}>\r\n                <div className=\"content\">\r\n                    Mass: {mass}\r\n                </div>\r\n            </Html>\r\n        </mesh>\r\n    )\r\n}\r\nexport default  NPoint;\r\n","import {useBox, usePlane} from \"@react-three/cannon\";\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport * as THREE from \"three\";\r\nimport {ObjectData} from \"../store/ObjectStore\";\r\nimport {Mesh} from \"three\";\r\nimport DecalData from \"../store/DecalData\";\r\n\r\n// @ts-ignore\r\nfunction Plane(objectData: ObjectData) {\r\n    const [args, setArgs] = useState<[]>(objectData.geometry.args);\r\n\r\n    const [position, setPosition] = useState(objectData.transform.position);\r\n    const [rotation, setRotation] = useState(objectData.transform.rotation);\r\n    const [scale, setScale] = useState(objectData.transform.scale);\r\n\r\n    const [castShadow, setCastShadow] = useState(objectData.castShadow);\r\n\r\n    const [color, setColor] = useState(objectData.material.color);\r\n    const [wireframe, setWireframe] = useState(objectData.material.wireframe);\r\n    const[reflectivity, setReflectivity] = useState(objectData.material.reflectivity);\r\n\r\n    const [mass, setMass] = useState(objectData.physics.mass);\r\n    const userData = {\r\n        controls: {\r\n            castShadow: {\r\n                label: 'Cast Shadow',\r\n                    value: castShadow,\r\n                    onChange: (value: boolean) => {\r\n                    setCastShadow(value);\r\n                }\r\n            },\r\n            transform: {\r\n                position: {\r\n                    label: 'Position',\r\n                        value: position,\r\n                        onChange: (value: [number, number, number]) => {\r\n                        setPosition(value);\r\n                    }\r\n                },\r\n                rotation: {\r\n                    label: 'Rotation',\r\n                        value: rotation,\r\n                        onChange: (value: [number, number, number]) => {\r\n                        setRotation(value);\r\n                    }\r\n                },\r\n                scale: {\r\n                    label: 'Scale',\r\n                        value: scale,\r\n                        onChange: (value: [number, number, number]) => {\r\n                        setScale(value);\r\n                    },\r\n                        lock: true\r\n                }\r\n            },\r\n            geometry: {\r\n                args: {\r\n                    label: 'Dimension',\r\n                        value: args,\r\n                        min: 0.1,\r\n                        step: 0.2,\r\n                        onChange: (value: any) => {\r\n                        setArgs(value);\r\n                    }\r\n                }\r\n            },\r\n            material: {\r\n                color: {\r\n                    label: 'color',\r\n                        value: color,\r\n                        onChange: (value: string) => {\r\n                        setColor(value);\r\n                    }\r\n                },\r\n                wireframe: {\r\n                    label: 'Wireframe',\r\n                        value: wireframe,\r\n                        onChange: (value: boolean) => {\r\n                        setWireframe(value);\r\n                    }\r\n                },\r\n                reflectivity: {\r\n                    label: 'Reflectivity',\r\n                        value: reflectivity,\r\n                        onChange: (value: number) => {\r\n                        setReflectivity(value);\r\n                    }\r\n                }\r\n            },\r\n            physics: {\r\n                mass: {\r\n                    label: 'Mass',\r\n                        value: mass,\r\n                        onChange: (value: number) => {\r\n                        setMass(value);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const [ref, api] = usePlane(() => ({ mass }));\r\n\r\n    useEffect(() => {\r\n        api.position.set(position[0], position[1], position[2]);\r\n        api.rotation.set(rotation[0], rotation[1], rotation[2])\r\n        api.mass?.set(mass);\r\n    }, [position, rotation, mass]);\r\n    return (\r\n        <>\r\n            <mesh ref={ref} name={\"Plane\"} castShadow={castShadow} scale={scale} userData={userData}>\r\n                <planeBufferGeometry args={args}/>\r\n                <meshPhysicalMaterial color={color} wireframe={wireframe} reflectivity={reflectivity}></meshPhysicalMaterial>\r\n            </mesh>\r\n        </>)\r\n}\r\nexport default Plane;\r\n","import {OrbitControls, useGLTF, useTexture} from \"@react-three/drei\";\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport {button, buttonGroup, folder, LevaInputs, useControls} from \"leva\";\r\nimport {useLoader, useThree} from \"@react-three/fiber\";\r\nimport Dodecahedron from \"../shapes/Dodecahedron\";\r\nimport * as THREE from 'three';\r\nimport Cube from \"../shapes/Cube\";\r\nimport {ObjectData, useObjectStore} from \"../store/ObjectStore\";\r\nimport {MyTransformControls} from \"./MyTransformControls\";\r\nimport NPoint from \"../shapes/NPoint\";\r\nimport {CubeTextureLoader, Object3D, TextureLoader, Vector2, Vector3} from \"three\";\r\nimport {DimensionsIcon} from \"@radix-ui/react-icons\";\r\nimport { plot } from '@leva-ui/plugin-plot';\r\nimport Plane from \"../shapes/Plane\";\r\nimport niceColors from 'nice-color-palettes'\r\nimport {RGBELoader} from \"three/examples/jsm/loaders/RGBELoader\";\r\nimport {GLTFLoader} from \"three/examples/jsm/loaders/GLTFLoader\";\r\nimport { Environment } from '@react-three/drei'\r\nimport {HDRCubeTextureLoader} from \"three/examples/jsm/loaders/HDRCubeTextureLoader\";\r\n\r\nfunction Model () {\r\n    const { raycaster, mouse, camera, scene, gl } = useThree();\r\n    // @ts-ignore\r\n    // const envMap = useLoader(HDRCubeTextureLoader, ['assets/hoverinc/street-by-water.hdr']);\r\n    const envMapLDR = useLoader(TextureLoader, 'assets/hoverinc/envmap.jpg');\r\n    const gltf = useLoader(GLTFLoader, 'assets/hoverinc/scene.gltf');\r\n    const model = gltf.scene;\r\n    model.scale.set(0.1, 0.1, 0.1);\r\n    model.position.set(-4, -5, 0);\r\n    model.rotation.set(0, Math.PI/2, 0);\r\n    model.traverse((child: any) => {\r\n        if (child instanceof THREE.Mesh) {\r\n            // only necessary for WebGLRenderer\r\n            child.castShadow = true;\r\n            child.receiveShadow = true;\r\n        }\r\n        if (child.material && child.material.name == 'LensesMat') {\r\n            child.material.transparent = true;\r\n        }\r\n    });\r\n    // new RGBELoader()\r\n    //     .setDataType(THREE.UnsignedByteType)\r\n    //     .load('assets/hoverinc/christmas_photo_studio_04_4k.hdr', function(texture) {\r\n    //         console.log(\"i am here!!!!!\");\r\n    //\r\n    //         var envMap = pmremGenerator.fromEquirectangular(texture).texture;\r\n    //\r\n    //         scene.background = envMap;\r\n    //         scene.environment = envMap;\r\n    //\r\n    //         texture.dispose();\r\n    //         pmremGenerator.dispose();\r\n    //     });\r\n    //\r\n    // let pmremGenerator = new THREE.PMREMGenerator(gl);\r\n    // pmremGenerator.compileEquirectangularShader();\r\n    return(<>\r\n        <ambientLight args={[0xffffff, 0.2]}></ambientLight>\r\n        <primitive object={model}></primitive>\r\n    </>)\r\n}\r\nconst TransformControlsLock = () => {\r\n\r\n    const { raycaster, mouse, camera, scene, gl } = useThree();\r\n    const reduce = (objects: Object3D[], into: Object): {  } => {\r\n        return objects.reduce((obj, child, i) => {\r\n                const schema = {\r\n                    // [`${child.type}_${child.name}`]: button(() => alert(child.id))\r\n                    [`${child.type}_${child.uuid}_uuid`]: {\r\n                        label: 'id',\r\n                        value: child.uuid,\r\n                        type: LevaInputs.STRING\r\n                    }\r\n                };\r\n                if(child.name){\r\n                    schema[`${child.type}_${child.name}_name`]= {\r\n                        label: 'name',\r\n                        value: child.name,\r\n                        type: LevaInputs.STRING\r\n                    }\r\n                }\r\n                const s = {[`Select_${child.uuid.substr(0, 4)}`]: button(() => setSelectedObject(scene.getObjectById(child.id)))}\r\n                // console.log(child);\r\n                reduce(child.children, {s});\r\n                const p = {\r\n                    [`${child.type}_${child.uuid.substr(0, 4)}`]: folder(s, {collapsed: true})\r\n                }\r\n\r\n                return Object.assign(obj, p);\r\n            },\r\n            into);\r\n    }\r\n    const sc = {'Scene': {\r\n            label: 'uuid',\r\n            value: scene.id,\r\n            type: LevaInputs.STRING\r\n        }};\r\n    reduce(scene.children, sc);\r\n    useControls('Scene', sc, [scene, scene.children]);\r\n\r\n    // @ts-ignore\r\n    const [{mode}, setMode] = useControls('Transform', () => ({\r\n        mode: {\r\n            label: 'Mode',\r\n            value: 'translate',\r\n            options: {\r\n                scale: 'scale',\r\n                rotate: 'rotate',\r\n                translate: 'translate'\r\n            },\r\n            // render: (get) => selectedObject != null\r\n        },\r\n        'Preset': buttonGroup({\r\n            label: <DimensionsIcon/>,\r\n            opts: {\r\n            'Translate': () => setMode({ mode: 'translate' }),\r\n            'Rotate': () => setMode({ mode: 'rotate' }),\r\n            'Scale': () => setMode({ mode: 'scale' }),\r\n        }})\r\n    }));\r\n\r\n    const [selectedObject, setSelectedObject] = useState<THREE.Object3D>();\r\n\r\n    const orbitControls = useRef<any>(null!);\r\n    const transformControls =  useRef<any>(null!);\r\n\r\n    useEffect(() => {\r\n        if(transformControls.current && orbitControls.current) {\r\n            const {current: controls} = transformControls;\r\n            const callback = (event: any) => {\r\n                orbitControls.current.enabled = !event.value;\r\n                if (mode === \"translate\" && !event.value) {\r\n                    // setTransform({position: (transformControls.current?.object as THREE.Object3D).position.toArray()});\r\n                }\r\n                if (mode === \"rotate\" && !event.value) {\r\n                    const orientation = (transformControls.current?.object as THREE.Object3D).rotation;\r\n                    // setTransform({rotation: [orientation.x, orientation.y, orientation.z]});\r\n                }\r\n                if (mode === \"scale\" && !event.value) {\r\n                    // setTransform({scale: (transformControls.current?.object as THREE.Object3D).scale.toArray()});\r\n                }\r\n            }\r\n            controls.addEventListener('dragging-changed', callback)\r\n            return () => controls.removeEventListener('dragging-changed', callback)\r\n        }\r\n    })\r\n\r\n    const object = selectedObject?.userData.controls || {};\r\n    const [, setObject] = useControls('Mesh', () => (object) , [selectedObject]);\r\n\r\n    const transform = selectedObject?.userData.controls?.transform || {\r\n        position: {\r\n            label: 'Position',\r\n            value: [0, 0, 0],\r\n            onChange: (value: Vector3) => {\r\n                // selectedObject?.position.set(value.x, value.y, value.z);\r\n            }\r\n        },\r\n        rotation : [0, 0, 0],\r\n        scale: [1, 1, 1]};\r\n    const [, setTransform] = useControls('Transform', () => (transform), [selectedObject]);\r\n\r\n    const [args, setArgs] = useState<any[]>([])\r\n    const inputs = args\r\n        .reduce((control, _, i) =>{\r\n            return Object.assign(control, { [`Point_${i}`]: {\r\n                label: `Point_${i}`,\r\n                value:_,\r\n                onChange: (value: number) => {\r\n                    // args[i] = value as any;\r\n                    // selectedObject?.userData.controls.geometry.args.onChange(args);\r\n                    console.log(value);\r\n                }\r\n            } })\r\n        }, {})\r\n    const values = useControls('Geometry', inputs, [args])\r\n\r\n    const geometry = selectedObject?.userData.controls?.geometry || {};\r\n    const [, setGeometry] = useControls('Geometry', () => (geometry), [selectedObject]);\r\n\r\n    const material = selectedObject?.userData.controls?.material || {};\r\n    const [, setMaterial] = useControls('Material', () => (material), [selectedObject]);\r\n\r\n    const physics = selectedObject?.userData.controls?.physics || {};\r\n    const [, setPhysics] = useControls('Physics', () => (physics), [selectedObject]);\r\n\r\n    // const { y } = useControls({\r\n    //     i: 100,\r\n    //     y: plot({ expression: 'cos(x)' })\r\n    // }, {})\r\n    // useControls('Labels', {\r\n    //     label: {\r\n    //         image: ''\r\n    //     },\r\n    //     Apply: button(() => alert('click'))\r\n    // });\r\n\r\n    useEffect(() => {\r\n        if(selectedObject){\r\n            console.log(selectedObject.position)\r\n            const orientation = selectedObject.rotation;\r\n            setTransform({position: selectedObject.position.toArray()});\r\n            setTransform({rotation: [orientation.x, orientation.y, orientation.z]});\r\n            setTransform({scale: selectedObject.scale.toArray()});\r\n            if(selectedObject.userData.controls){\r\n                setObject({castShadow: selectedObject.userData.controls.castShadow?.value});\r\n\r\n                // const arg = selectedObject.userData.controls.geometry.args.value[0];\r\n                //\r\n                // if(typeof arg === 'number'){\r\n                //     // setArgs([]);\r\n                //     setGeometry({args: selectedObject.userData.controls.geometry.args.value});\r\n                // } else if(typeof arg === 'object') {\r\n                //     setArgs(selectedObject.userData.controls.geometry.args.value);\r\n                //     setGeometry({args: []});\r\n                // }\r\n                setMaterial({ color: selectedObject.userData.controls.material.color.value});\r\n                setMaterial({ wireframe: selectedObject.userData.controls.material.wireframe.value});\r\n                setPhysics({enabled: selectedObject.userData.controls.physics?.enabled?.value});\r\n                setPhysics({mass: selectedObject.userData.controls.physics.mass.value});\r\n\r\n            }else{\r\n\r\n            }\r\n\r\n        } else {\r\n            // setMaterialControls([]);\r\n        }\r\n    },[selectedObject]);\r\n\r\n\r\n    const objects: ObjectData[] = useObjectStore((state: any) => state.objects);\r\n\r\n    const onPointerDown = (event: PointerEvent) => {\r\n        mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\r\n        mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;\r\n\r\n        raycaster.setFromCamera(mouse, camera);\r\n        const intersects = raycaster.intersectObjects(scene.children).filter(intersect => intersect.object.type === 'Mesh');\r\n        // .sort((a, b) => a.distance < b.distance ? 1: -1);\r\n        if (intersects.length) {\r\n            const object = intersects[0].object;\r\n            if(object.userData){\r\n                setSelectedObject(object);\r\n            }\r\n        }\r\n\r\n    }\r\n    document.addEventListener( 'pointerdown', onPointerDown );\r\n    const renderObject = (objectData: ObjectData, index: number) => {\r\n        switch (objectData.type) {\r\n            case \"Plane\":\r\n                return <Plane key={index} {...objectData}/>;\r\n            case \"Cube\":\r\n                return <Cube key={index} {...objectData}/>;\r\n            case \"NPoint\":\r\n                return <NPoint key={index} {...objectData}/>;\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            {selectedObject && <MyTransformControls\r\n                ref={transformControls}\r\n                enabled={true}\r\n                position={selectedObject.position}\r\n                rotation={selectedObject.rotation}\r\n                scale={selectedObject.scale}\r\n                mode={mode}\r\n                camera={camera}\r\n                showX={true}\r\n                showY={true}\r\n                showZ={true}\r\n                size={1}\r\n                space={\"local\"}\r\n                axis={null}\r\n                translationSnap={null}\r\n                rotationSnap={null}\r\n                scaleSnap={null}\r\n                dragging\r\n                castShadow receiveShadow\r\n                object={selectedObject}\r\n            >\r\n            </MyTransformControls>\r\n            }\r\n            <OrbitControls\r\n                ref={orbitControls}\r\n                // enableDamping={true}\r\n                // dampingFactor={0.25}\r\n                // rotateSpeed={0.4}\r\n                // keyPanSpeed={0.4}\r\n                // screenSpacePanning={true}\r\n                // zoomSpeed={0.6}\r\n                // enablePan={true}\r\n                // panSpeed={0.4}\r\n                // minPolarAngle={Math.PI / 4}\r\n                // maxPolarAngle={Math.PI / 2}\r\n                // minDistance={-500}\r\n                // maxDistance={1000}\r\n            />\r\n            <Model/>\r\n            {/*<Environment preset=\"sunset\" background/>*/}\r\n            {/*<Dodecahedron time={0} />*/}\r\n            {/*{objects.map(renderObject)}*/}\r\n            {/*<Plane color={niceColors[17][1]} args={[20,20]} position={[0, -10, 0]} rotation={[-Math.PI / 2, 0, 0]}/>*/}\r\n        </>\r\n\r\n        )\r\n}\r\nexport default TransformControlsLock;\r\n","import Plane from \"../shapes/Plane\";\r\nimport {Physics} from \"@react-three/cannon\";\r\nimport React, {useEffect} from \"react\";\r\nimport {button, buttonGroup, folder, LevaInputs, useControls} from \"leva\";\r\nimport niceColors from 'nice-color-palettes'\r\nimport {useThree} from \"@react-three/fiber\";\r\nimport TransformControlsLock from \"../three-extension/TransformControlsLock\";\r\nimport {ACESFilmicToneMapping, Object3D} from \"three\";\r\nimport {DimensionsIcon, InputIcon} from \"@radix-ui/react-icons\";\r\n//@ts-ignore\r\nimport { RayTracingRenderer } from 'ray-tracing-renderer'\r\nimport {useTransform} from \"leva/plugin\";\r\n\r\n\r\n// @ts-ignore\r\nconst BasicScene = () => {\r\n    const { raycaster, mouse, camera, scene, gl } = useThree();\r\n\r\n\r\n    useTransform();\r\n\r\n    const canvasRef = React.useRef() as React.MutableRefObject<HTMLCanvasElement>;\r\n    const hoverinc = new RayTracingRenderer({\r\n        canvas: document.getElementById(\"canvas-hoverinc\"),\r\n        antialias: true,\r\n        alpha: true,\r\n    });\r\n    hoverinc.setSize(window.innerWidth, window.innerHeight);\r\n\r\n    const tick = () => {\r\n\r\n        hoverinc.render(scene, camera);\r\n        requestAnimationFrame(tick);\r\n    }\r\n\r\n\r\n    // @ts-ignore\r\n    const [{renderer}, setRenderer] = useControls('Renderer', () => ({\r\n        renderer: {\r\n            label: 'Provider',\r\n            value: 'webgl',\r\n            options: {\r\n                webgl: 'webgl',\r\n                hoverinc: 'hoverinc',\r\n                erichlof: 'erichlof'\r\n            },\r\n            onChange(value: string) {\r\n                if(value === 'hoverinc'){\r\n                    // @ts-ignore\r\n                    document.getElementById(\"canvas-hoverinc\").style.display = 'block';\r\n                    // @ts-ignore\r\n                    document.getElementById(\"canvas-webgl\").style.display = 'none';\r\n                    hoverinc.gammaOutput = true;\r\n                    hoverinc.gammaFactor = 2.2;\r\n                    hoverinc.setPixelRatio(1.0);\r\n                    hoverinc.toneMapping = ACESFilmicToneMapping;\r\n                    hoverinc.toneMappingExposure = 1.5;\r\n                    hoverinc.renderWhenOffFocus = false;\r\n                    hoverinc.bounces = 3;\r\n                    tick();\r\n                }\r\n                if(value == 'webgl') {\r\n                    // @ts-ignore\r\n                    document.getElementById(\"canvas-hoverinc\").style.display = 'none';\r\n                    // @ts-ignore\r\n                    document.getElementById(\"canvas-webgl\").style.display = 'block';\r\n                }\r\n            }\r\n            // render: (get) => selectedObject != null\r\n        },\r\n        'Preset': buttonGroup({\r\n            label: <InputIcon/>,\r\n            opts: {\r\n                'webgl': () => setRenderer({ renderer: 'webgl' }),\r\n                'hoverinc': () => setRenderer({ renderer: 'hoverinc' }),\r\n                'erichlof': () => setRenderer({ renderer: 'erichlof' }),\r\n            }})\r\n    }));\r\n\r\n    return (\r\n\r\n        <>\r\n            <Physics>\r\n                <TransformControlsLock></TransformControlsLock>\r\n                {/*<Dodecahedron time={0}/>*/}\r\n            </Physics>\r\n            {/*<canvas ref={canvasRef}></canvas>*/}\r\n        </>\r\n\r\n    )\r\n}\r\nexport default BasicScene;\r\n","import React, {Suspense, useEffect, useRef, useState} from \"react\"\r\nimport {Camera, Canvas, extend, useFrame, useThree, render} from \"@react-three/fiber\"\r\nimport * as THREE from \"three\"\r\nimport { Html, OrbitControls, TransformControls } from \"@react-three/drei\"\r\nimport './App.css';\r\nimport {Color} from \"three\";\r\nimport BasicScene from \"./scene/BasicScene\";\r\n\r\n\r\nconst Fallback = () => (\r\n    <Html>\r\n        <div className=\"loading\">Loading...</div>\r\n    </Html>\r\n)\r\n\r\nfunction App() {\r\n    const [selectedObject, setSelectedObject] = useState<THREE.Object3D>();\r\n\r\n    return (\r\n        <>\r\n            <canvas id=\"canvas-hoverinc\" style={{width: 500, height: 500, background: \"white\", display: \"none\"}}></canvas>\r\n            <Canvas id={\"canvas-webgl\"} style={{ background: \"#BFD1E5\"}} camera={{ position: [10, 5, 10], rotation:[0, 0, 0], fov: 50 }}\r\n                    gl={{alpha: true}}\r\n                    // raycaster={{ filter: (intersects, state) => intersects.reverse()}}\r\n            >\r\n\r\n                <axesHelper args={[20]}/>\r\n                <pointLight color={new Color('indianred')} />\r\n                <pointLight position={[10, 10, -10]} color={new Color('orange')} />\r\n                <pointLight position={[-10, -10, 10]} color={new Color('lightblue')} />\r\n                <Suspense fallback={<Fallback />}>\r\n                    <BasicScene />\r\n                </Suspense>\r\n                {/*<EffectComposer>*/}\r\n                {/*    <SelectiveBloom luminanceThreshold={0} luminanceSmoothing={0.9} height={300} />*/}\r\n                {/*</EffectComposer>*/}\r\n            </Canvas>\r\n        </>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}